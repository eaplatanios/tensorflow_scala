// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: tensorflow/core/protobuf/checkpointable_object_graph.proto

#ifndef PROTOBUF_INCLUDED_tensorflow_2fcore_2fprotobuf_2fcheckpointable_5fobject_5fgraph_2eproto
#define PROTOBUF_INCLUDED_tensorflow_2fcore_2fprotobuf_2fcheckpointable_5fobject_5fgraph_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_tensorflow_2fcore_2fprotobuf_2fcheckpointable_5fobject_5fgraph_2eproto 

namespace protobuf_tensorflow_2fcore_2fprotobuf_2fcheckpointable_5fobject_5fgraph_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[5];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_tensorflow_2fcore_2fprotobuf_2fcheckpointable_5fobject_5fgraph_2eproto
namespace tensorflow {
class CheckpointableObjectGraph;
class CheckpointableObjectGraphDefaultTypeInternal;
extern CheckpointableObjectGraphDefaultTypeInternal _CheckpointableObjectGraph_default_instance_;
class CheckpointableObjectGraph_CheckpointableObject;
class CheckpointableObjectGraph_CheckpointableObjectDefaultTypeInternal;
extern CheckpointableObjectGraph_CheckpointableObjectDefaultTypeInternal _CheckpointableObjectGraph_CheckpointableObject_default_instance_;
class CheckpointableObjectGraph_CheckpointableObject_ObjectReference;
class CheckpointableObjectGraph_CheckpointableObject_ObjectReferenceDefaultTypeInternal;
extern CheckpointableObjectGraph_CheckpointableObject_ObjectReferenceDefaultTypeInternal _CheckpointableObjectGraph_CheckpointableObject_ObjectReference_default_instance_;
class CheckpointableObjectGraph_CheckpointableObject_SerializedTensor;
class CheckpointableObjectGraph_CheckpointableObject_SerializedTensorDefaultTypeInternal;
extern CheckpointableObjectGraph_CheckpointableObject_SerializedTensorDefaultTypeInternal _CheckpointableObjectGraph_CheckpointableObject_SerializedTensor_default_instance_;
class CheckpointableObjectGraph_CheckpointableObject_SlotVariableReference;
class CheckpointableObjectGraph_CheckpointableObject_SlotVariableReferenceDefaultTypeInternal;
extern CheckpointableObjectGraph_CheckpointableObject_SlotVariableReferenceDefaultTypeInternal _CheckpointableObjectGraph_CheckpointableObject_SlotVariableReference_default_instance_;
}  // namespace tensorflow
namespace google {
namespace protobuf {
template<> ::tensorflow::CheckpointableObjectGraph* Arena::CreateMaybeMessage<::tensorflow::CheckpointableObjectGraph>(Arena*);
template<> ::tensorflow::CheckpointableObjectGraph_CheckpointableObject* Arena::CreateMaybeMessage<::tensorflow::CheckpointableObjectGraph_CheckpointableObject>(Arena*);
template<> ::tensorflow::CheckpointableObjectGraph_CheckpointableObject_ObjectReference* Arena::CreateMaybeMessage<::tensorflow::CheckpointableObjectGraph_CheckpointableObject_ObjectReference>(Arena*);
template<> ::tensorflow::CheckpointableObjectGraph_CheckpointableObject_SerializedTensor* Arena::CreateMaybeMessage<::tensorflow::CheckpointableObjectGraph_CheckpointableObject_SerializedTensor>(Arena*);
template<> ::tensorflow::CheckpointableObjectGraph_CheckpointableObject_SlotVariableReference* Arena::CreateMaybeMessage<::tensorflow::CheckpointableObjectGraph_CheckpointableObject_SlotVariableReference>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace tensorflow {

// ===================================================================

class CheckpointableObjectGraph_CheckpointableObject_ObjectReference : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:tensorflow.CheckpointableObjectGraph.CheckpointableObject.ObjectReference) */ {
 public:
  CheckpointableObjectGraph_CheckpointableObject_ObjectReference();
  virtual ~CheckpointableObjectGraph_CheckpointableObject_ObjectReference();

  CheckpointableObjectGraph_CheckpointableObject_ObjectReference(const CheckpointableObjectGraph_CheckpointableObject_ObjectReference& from);

  inline CheckpointableObjectGraph_CheckpointableObject_ObjectReference& operator=(const CheckpointableObjectGraph_CheckpointableObject_ObjectReference& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CheckpointableObjectGraph_CheckpointableObject_ObjectReference(CheckpointableObjectGraph_CheckpointableObject_ObjectReference&& from) noexcept
    : CheckpointableObjectGraph_CheckpointableObject_ObjectReference() {
    *this = ::std::move(from);
  }

  inline CheckpointableObjectGraph_CheckpointableObject_ObjectReference& operator=(CheckpointableObjectGraph_CheckpointableObject_ObjectReference&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline ::google::protobuf::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const CheckpointableObjectGraph_CheckpointableObject_ObjectReference& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CheckpointableObjectGraph_CheckpointableObject_ObjectReference* internal_default_instance() {
    return reinterpret_cast<const CheckpointableObjectGraph_CheckpointableObject_ObjectReference*>(
               &_CheckpointableObjectGraph_CheckpointableObject_ObjectReference_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void UnsafeArenaSwap(CheckpointableObjectGraph_CheckpointableObject_ObjectReference* other);
  void Swap(CheckpointableObjectGraph_CheckpointableObject_ObjectReference* other);
  friend void swap(CheckpointableObjectGraph_CheckpointableObject_ObjectReference& a, CheckpointableObjectGraph_CheckpointableObject_ObjectReference& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CheckpointableObjectGraph_CheckpointableObject_ObjectReference* New() const final {
    return CreateMaybeMessage<CheckpointableObjectGraph_CheckpointableObject_ObjectReference>(NULL);
  }

  CheckpointableObjectGraph_CheckpointableObject_ObjectReference* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CheckpointableObjectGraph_CheckpointableObject_ObjectReference>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CheckpointableObjectGraph_CheckpointableObject_ObjectReference& from);
  void MergeFrom(const CheckpointableObjectGraph_CheckpointableObject_ObjectReference& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CheckpointableObjectGraph_CheckpointableObject_ObjectReference* other);
  protected:
  explicit CheckpointableObjectGraph_CheckpointableObject_ObjectReference(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string local_name = 2;
  void clear_local_name();
  static const int kLocalNameFieldNumber = 2;
  const ::std::string& local_name() const;
  void set_local_name(const ::std::string& value);
  #if LANG_CXX11
  void set_local_name(::std::string&& value);
  #endif
  void set_local_name(const char* value);
  void set_local_name(const char* value, size_t size);
  ::std::string* mutable_local_name();
  ::std::string* release_local_name();
  void set_allocated_local_name(::std::string* local_name);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_local_name();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_local_name(
      ::std::string* local_name);

  // int32 node_id = 1;
  void clear_node_id();
  static const int kNodeIdFieldNumber = 1;
  ::google::protobuf::int32 node_id() const;
  void set_node_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:tensorflow.CheckpointableObjectGraph.CheckpointableObject.ObjectReference)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::ArenaStringPtr local_name_;
  ::google::protobuf::int32 node_id_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_tensorflow_2fcore_2fprotobuf_2fcheckpointable_5fobject_5fgraph_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CheckpointableObjectGraph_CheckpointableObject_SerializedTensor : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:tensorflow.CheckpointableObjectGraph.CheckpointableObject.SerializedTensor) */ {
 public:
  CheckpointableObjectGraph_CheckpointableObject_SerializedTensor();
  virtual ~CheckpointableObjectGraph_CheckpointableObject_SerializedTensor();

  CheckpointableObjectGraph_CheckpointableObject_SerializedTensor(const CheckpointableObjectGraph_CheckpointableObject_SerializedTensor& from);

  inline CheckpointableObjectGraph_CheckpointableObject_SerializedTensor& operator=(const CheckpointableObjectGraph_CheckpointableObject_SerializedTensor& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CheckpointableObjectGraph_CheckpointableObject_SerializedTensor(CheckpointableObjectGraph_CheckpointableObject_SerializedTensor&& from) noexcept
    : CheckpointableObjectGraph_CheckpointableObject_SerializedTensor() {
    *this = ::std::move(from);
  }

  inline CheckpointableObjectGraph_CheckpointableObject_SerializedTensor& operator=(CheckpointableObjectGraph_CheckpointableObject_SerializedTensor&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline ::google::protobuf::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const CheckpointableObjectGraph_CheckpointableObject_SerializedTensor& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CheckpointableObjectGraph_CheckpointableObject_SerializedTensor* internal_default_instance() {
    return reinterpret_cast<const CheckpointableObjectGraph_CheckpointableObject_SerializedTensor*>(
               &_CheckpointableObjectGraph_CheckpointableObject_SerializedTensor_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void UnsafeArenaSwap(CheckpointableObjectGraph_CheckpointableObject_SerializedTensor* other);
  void Swap(CheckpointableObjectGraph_CheckpointableObject_SerializedTensor* other);
  friend void swap(CheckpointableObjectGraph_CheckpointableObject_SerializedTensor& a, CheckpointableObjectGraph_CheckpointableObject_SerializedTensor& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CheckpointableObjectGraph_CheckpointableObject_SerializedTensor* New() const final {
    return CreateMaybeMessage<CheckpointableObjectGraph_CheckpointableObject_SerializedTensor>(NULL);
  }

  CheckpointableObjectGraph_CheckpointableObject_SerializedTensor* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CheckpointableObjectGraph_CheckpointableObject_SerializedTensor>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CheckpointableObjectGraph_CheckpointableObject_SerializedTensor& from);
  void MergeFrom(const CheckpointableObjectGraph_CheckpointableObject_SerializedTensor& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CheckpointableObjectGraph_CheckpointableObject_SerializedTensor* other);
  protected:
  explicit CheckpointableObjectGraph_CheckpointableObject_SerializedTensor(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_name();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_name(
      ::std::string* name);

  // string full_name = 2;
  void clear_full_name();
  static const int kFullNameFieldNumber = 2;
  const ::std::string& full_name() const;
  void set_full_name(const ::std::string& value);
  #if LANG_CXX11
  void set_full_name(::std::string&& value);
  #endif
  void set_full_name(const char* value);
  void set_full_name(const char* value, size_t size);
  ::std::string* mutable_full_name();
  ::std::string* release_full_name();
  void set_allocated_full_name(::std::string* full_name);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_full_name();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_full_name(
      ::std::string* full_name);

  // string checkpoint_key = 3;
  void clear_checkpoint_key();
  static const int kCheckpointKeyFieldNumber = 3;
  const ::std::string& checkpoint_key() const;
  void set_checkpoint_key(const ::std::string& value);
  #if LANG_CXX11
  void set_checkpoint_key(::std::string&& value);
  #endif
  void set_checkpoint_key(const char* value);
  void set_checkpoint_key(const char* value, size_t size);
  ::std::string* mutable_checkpoint_key();
  ::std::string* release_checkpoint_key();
  void set_allocated_checkpoint_key(::std::string* checkpoint_key);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_checkpoint_key();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_checkpoint_key(
      ::std::string* checkpoint_key);

  // @@protoc_insertion_point(class_scope:tensorflow.CheckpointableObjectGraph.CheckpointableObject.SerializedTensor)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr full_name_;
  ::google::protobuf::internal::ArenaStringPtr checkpoint_key_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_tensorflow_2fcore_2fprotobuf_2fcheckpointable_5fobject_5fgraph_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CheckpointableObjectGraph_CheckpointableObject_SlotVariableReference : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:tensorflow.CheckpointableObjectGraph.CheckpointableObject.SlotVariableReference) */ {
 public:
  CheckpointableObjectGraph_CheckpointableObject_SlotVariableReference();
  virtual ~CheckpointableObjectGraph_CheckpointableObject_SlotVariableReference();

  CheckpointableObjectGraph_CheckpointableObject_SlotVariableReference(const CheckpointableObjectGraph_CheckpointableObject_SlotVariableReference& from);

  inline CheckpointableObjectGraph_CheckpointableObject_SlotVariableReference& operator=(const CheckpointableObjectGraph_CheckpointableObject_SlotVariableReference& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CheckpointableObjectGraph_CheckpointableObject_SlotVariableReference(CheckpointableObjectGraph_CheckpointableObject_SlotVariableReference&& from) noexcept
    : CheckpointableObjectGraph_CheckpointableObject_SlotVariableReference() {
    *this = ::std::move(from);
  }

  inline CheckpointableObjectGraph_CheckpointableObject_SlotVariableReference& operator=(CheckpointableObjectGraph_CheckpointableObject_SlotVariableReference&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline ::google::protobuf::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const CheckpointableObjectGraph_CheckpointableObject_SlotVariableReference& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CheckpointableObjectGraph_CheckpointableObject_SlotVariableReference* internal_default_instance() {
    return reinterpret_cast<const CheckpointableObjectGraph_CheckpointableObject_SlotVariableReference*>(
               &_CheckpointableObjectGraph_CheckpointableObject_SlotVariableReference_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void UnsafeArenaSwap(CheckpointableObjectGraph_CheckpointableObject_SlotVariableReference* other);
  void Swap(CheckpointableObjectGraph_CheckpointableObject_SlotVariableReference* other);
  friend void swap(CheckpointableObjectGraph_CheckpointableObject_SlotVariableReference& a, CheckpointableObjectGraph_CheckpointableObject_SlotVariableReference& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CheckpointableObjectGraph_CheckpointableObject_SlotVariableReference* New() const final {
    return CreateMaybeMessage<CheckpointableObjectGraph_CheckpointableObject_SlotVariableReference>(NULL);
  }

  CheckpointableObjectGraph_CheckpointableObject_SlotVariableReference* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CheckpointableObjectGraph_CheckpointableObject_SlotVariableReference>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CheckpointableObjectGraph_CheckpointableObject_SlotVariableReference& from);
  void MergeFrom(const CheckpointableObjectGraph_CheckpointableObject_SlotVariableReference& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CheckpointableObjectGraph_CheckpointableObject_SlotVariableReference* other);
  protected:
  explicit CheckpointableObjectGraph_CheckpointableObject_SlotVariableReference(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string slot_name = 2;
  void clear_slot_name();
  static const int kSlotNameFieldNumber = 2;
  const ::std::string& slot_name() const;
  void set_slot_name(const ::std::string& value);
  #if LANG_CXX11
  void set_slot_name(::std::string&& value);
  #endif
  void set_slot_name(const char* value);
  void set_slot_name(const char* value, size_t size);
  ::std::string* mutable_slot_name();
  ::std::string* release_slot_name();
  void set_allocated_slot_name(::std::string* slot_name);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_slot_name();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_slot_name(
      ::std::string* slot_name);

  // int32 original_variable_node_id = 1;
  void clear_original_variable_node_id();
  static const int kOriginalVariableNodeIdFieldNumber = 1;
  ::google::protobuf::int32 original_variable_node_id() const;
  void set_original_variable_node_id(::google::protobuf::int32 value);

  // int32 slot_variable_node_id = 3;
  void clear_slot_variable_node_id();
  static const int kSlotVariableNodeIdFieldNumber = 3;
  ::google::protobuf::int32 slot_variable_node_id() const;
  void set_slot_variable_node_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:tensorflow.CheckpointableObjectGraph.CheckpointableObject.SlotVariableReference)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::ArenaStringPtr slot_name_;
  ::google::protobuf::int32 original_variable_node_id_;
  ::google::protobuf::int32 slot_variable_node_id_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_tensorflow_2fcore_2fprotobuf_2fcheckpointable_5fobject_5fgraph_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CheckpointableObjectGraph_CheckpointableObject : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:tensorflow.CheckpointableObjectGraph.CheckpointableObject) */ {
 public:
  CheckpointableObjectGraph_CheckpointableObject();
  virtual ~CheckpointableObjectGraph_CheckpointableObject();

  CheckpointableObjectGraph_CheckpointableObject(const CheckpointableObjectGraph_CheckpointableObject& from);

  inline CheckpointableObjectGraph_CheckpointableObject& operator=(const CheckpointableObjectGraph_CheckpointableObject& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CheckpointableObjectGraph_CheckpointableObject(CheckpointableObjectGraph_CheckpointableObject&& from) noexcept
    : CheckpointableObjectGraph_CheckpointableObject() {
    *this = ::std::move(from);
  }

  inline CheckpointableObjectGraph_CheckpointableObject& operator=(CheckpointableObjectGraph_CheckpointableObject&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline ::google::protobuf::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const CheckpointableObjectGraph_CheckpointableObject& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CheckpointableObjectGraph_CheckpointableObject* internal_default_instance() {
    return reinterpret_cast<const CheckpointableObjectGraph_CheckpointableObject*>(
               &_CheckpointableObjectGraph_CheckpointableObject_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void UnsafeArenaSwap(CheckpointableObjectGraph_CheckpointableObject* other);
  void Swap(CheckpointableObjectGraph_CheckpointableObject* other);
  friend void swap(CheckpointableObjectGraph_CheckpointableObject& a, CheckpointableObjectGraph_CheckpointableObject& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CheckpointableObjectGraph_CheckpointableObject* New() const final {
    return CreateMaybeMessage<CheckpointableObjectGraph_CheckpointableObject>(NULL);
  }

  CheckpointableObjectGraph_CheckpointableObject* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CheckpointableObjectGraph_CheckpointableObject>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CheckpointableObjectGraph_CheckpointableObject& from);
  void MergeFrom(const CheckpointableObjectGraph_CheckpointableObject& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CheckpointableObjectGraph_CheckpointableObject* other);
  protected:
  explicit CheckpointableObjectGraph_CheckpointableObject(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef CheckpointableObjectGraph_CheckpointableObject_ObjectReference ObjectReference;
  typedef CheckpointableObjectGraph_CheckpointableObject_SerializedTensor SerializedTensor;
  typedef CheckpointableObjectGraph_CheckpointableObject_SlotVariableReference SlotVariableReference;

  // accessors -------------------------------------------------------

  // repeated .tensorflow.CheckpointableObjectGraph.CheckpointableObject.ObjectReference children = 1;
  int children_size() const;
  void clear_children();
  static const int kChildrenFieldNumber = 1;
  ::tensorflow::CheckpointableObjectGraph_CheckpointableObject_ObjectReference* mutable_children(int index);
  ::google::protobuf::RepeatedPtrField< ::tensorflow::CheckpointableObjectGraph_CheckpointableObject_ObjectReference >*
      mutable_children();
  const ::tensorflow::CheckpointableObjectGraph_CheckpointableObject_ObjectReference& children(int index) const;
  ::tensorflow::CheckpointableObjectGraph_CheckpointableObject_ObjectReference* add_children();
  const ::google::protobuf::RepeatedPtrField< ::tensorflow::CheckpointableObjectGraph_CheckpointableObject_ObjectReference >&
      children() const;

  // repeated .tensorflow.CheckpointableObjectGraph.CheckpointableObject.SerializedTensor attributes = 2;
  int attributes_size() const;
  void clear_attributes();
  static const int kAttributesFieldNumber = 2;
  ::tensorflow::CheckpointableObjectGraph_CheckpointableObject_SerializedTensor* mutable_attributes(int index);
  ::google::protobuf::RepeatedPtrField< ::tensorflow::CheckpointableObjectGraph_CheckpointableObject_SerializedTensor >*
      mutable_attributes();
  const ::tensorflow::CheckpointableObjectGraph_CheckpointableObject_SerializedTensor& attributes(int index) const;
  ::tensorflow::CheckpointableObjectGraph_CheckpointableObject_SerializedTensor* add_attributes();
  const ::google::protobuf::RepeatedPtrField< ::tensorflow::CheckpointableObjectGraph_CheckpointableObject_SerializedTensor >&
      attributes() const;

  // repeated .tensorflow.CheckpointableObjectGraph.CheckpointableObject.SlotVariableReference slot_variables = 3;
  int slot_variables_size() const;
  void clear_slot_variables();
  static const int kSlotVariablesFieldNumber = 3;
  ::tensorflow::CheckpointableObjectGraph_CheckpointableObject_SlotVariableReference* mutable_slot_variables(int index);
  ::google::protobuf::RepeatedPtrField< ::tensorflow::CheckpointableObjectGraph_CheckpointableObject_SlotVariableReference >*
      mutable_slot_variables();
  const ::tensorflow::CheckpointableObjectGraph_CheckpointableObject_SlotVariableReference& slot_variables(int index) const;
  ::tensorflow::CheckpointableObjectGraph_CheckpointableObject_SlotVariableReference* add_slot_variables();
  const ::google::protobuf::RepeatedPtrField< ::tensorflow::CheckpointableObjectGraph_CheckpointableObject_SlotVariableReference >&
      slot_variables() const;

  // @@protoc_insertion_point(class_scope:tensorflow.CheckpointableObjectGraph.CheckpointableObject)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::RepeatedPtrField< ::tensorflow::CheckpointableObjectGraph_CheckpointableObject_ObjectReference > children_;
  ::google::protobuf::RepeatedPtrField< ::tensorflow::CheckpointableObjectGraph_CheckpointableObject_SerializedTensor > attributes_;
  ::google::protobuf::RepeatedPtrField< ::tensorflow::CheckpointableObjectGraph_CheckpointableObject_SlotVariableReference > slot_variables_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_tensorflow_2fcore_2fprotobuf_2fcheckpointable_5fobject_5fgraph_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CheckpointableObjectGraph : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:tensorflow.CheckpointableObjectGraph) */ {
 public:
  CheckpointableObjectGraph();
  virtual ~CheckpointableObjectGraph();

  CheckpointableObjectGraph(const CheckpointableObjectGraph& from);

  inline CheckpointableObjectGraph& operator=(const CheckpointableObjectGraph& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CheckpointableObjectGraph(CheckpointableObjectGraph&& from) noexcept
    : CheckpointableObjectGraph() {
    *this = ::std::move(from);
  }

  inline CheckpointableObjectGraph& operator=(CheckpointableObjectGraph&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline ::google::protobuf::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const CheckpointableObjectGraph& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CheckpointableObjectGraph* internal_default_instance() {
    return reinterpret_cast<const CheckpointableObjectGraph*>(
               &_CheckpointableObjectGraph_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void UnsafeArenaSwap(CheckpointableObjectGraph* other);
  void Swap(CheckpointableObjectGraph* other);
  friend void swap(CheckpointableObjectGraph& a, CheckpointableObjectGraph& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CheckpointableObjectGraph* New() const final {
    return CreateMaybeMessage<CheckpointableObjectGraph>(NULL);
  }

  CheckpointableObjectGraph* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CheckpointableObjectGraph>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CheckpointableObjectGraph& from);
  void MergeFrom(const CheckpointableObjectGraph& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CheckpointableObjectGraph* other);
  protected:
  explicit CheckpointableObjectGraph(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef CheckpointableObjectGraph_CheckpointableObject CheckpointableObject;

  // accessors -------------------------------------------------------

  // repeated .tensorflow.CheckpointableObjectGraph.CheckpointableObject nodes = 1;
  int nodes_size() const;
  void clear_nodes();
  static const int kNodesFieldNumber = 1;
  ::tensorflow::CheckpointableObjectGraph_CheckpointableObject* mutable_nodes(int index);
  ::google::protobuf::RepeatedPtrField< ::tensorflow::CheckpointableObjectGraph_CheckpointableObject >*
      mutable_nodes();
  const ::tensorflow::CheckpointableObjectGraph_CheckpointableObject& nodes(int index) const;
  ::tensorflow::CheckpointableObjectGraph_CheckpointableObject* add_nodes();
  const ::google::protobuf::RepeatedPtrField< ::tensorflow::CheckpointableObjectGraph_CheckpointableObject >&
      nodes() const;

  // @@protoc_insertion_point(class_scope:tensorflow.CheckpointableObjectGraph)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::RepeatedPtrField< ::tensorflow::CheckpointableObjectGraph_CheckpointableObject > nodes_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_tensorflow_2fcore_2fprotobuf_2fcheckpointable_5fobject_5fgraph_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// CheckpointableObjectGraph_CheckpointableObject_ObjectReference

// int32 node_id = 1;
inline void CheckpointableObjectGraph_CheckpointableObject_ObjectReference::clear_node_id() {
  node_id_ = 0;
}
inline ::google::protobuf::int32 CheckpointableObjectGraph_CheckpointableObject_ObjectReference::node_id() const {
  // @@protoc_insertion_point(field_get:tensorflow.CheckpointableObjectGraph.CheckpointableObject.ObjectReference.node_id)
  return node_id_;
}
inline void CheckpointableObjectGraph_CheckpointableObject_ObjectReference::set_node_id(::google::protobuf::int32 value) {
  
  node_id_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.CheckpointableObjectGraph.CheckpointableObject.ObjectReference.node_id)
}

// string local_name = 2;
inline void CheckpointableObjectGraph_CheckpointableObject_ObjectReference::clear_local_name() {
  local_name_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& CheckpointableObjectGraph_CheckpointableObject_ObjectReference::local_name() const {
  // @@protoc_insertion_point(field_get:tensorflow.CheckpointableObjectGraph.CheckpointableObject.ObjectReference.local_name)
  return local_name_.Get();
}
inline void CheckpointableObjectGraph_CheckpointableObject_ObjectReference::set_local_name(const ::std::string& value) {
  
  local_name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:tensorflow.CheckpointableObjectGraph.CheckpointableObject.ObjectReference.local_name)
}
#if LANG_CXX11
inline void CheckpointableObjectGraph_CheckpointableObject_ObjectReference::set_local_name(::std::string&& value) {
  
  local_name_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:tensorflow.CheckpointableObjectGraph.CheckpointableObject.ObjectReference.local_name)
}
#endif
inline void CheckpointableObjectGraph_CheckpointableObject_ObjectReference::set_local_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  local_name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:tensorflow.CheckpointableObjectGraph.CheckpointableObject.ObjectReference.local_name)
}
inline void CheckpointableObjectGraph_CheckpointableObject_ObjectReference::set_local_name(const char* value,
    size_t size) {
  
  local_name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:tensorflow.CheckpointableObjectGraph.CheckpointableObject.ObjectReference.local_name)
}
inline ::std::string* CheckpointableObjectGraph_CheckpointableObject_ObjectReference::mutable_local_name() {
  
  // @@protoc_insertion_point(field_mutable:tensorflow.CheckpointableObjectGraph.CheckpointableObject.ObjectReference.local_name)
  return local_name_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* CheckpointableObjectGraph_CheckpointableObject_ObjectReference::release_local_name() {
  // @@protoc_insertion_point(field_release:tensorflow.CheckpointableObjectGraph.CheckpointableObject.ObjectReference.local_name)
  
  return local_name_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void CheckpointableObjectGraph_CheckpointableObject_ObjectReference::set_allocated_local_name(::std::string* local_name) {
  if (local_name != NULL) {
    
  } else {
    
  }
  local_name_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), local_name,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:tensorflow.CheckpointableObjectGraph.CheckpointableObject.ObjectReference.local_name)
}
inline ::std::string* CheckpointableObjectGraph_CheckpointableObject_ObjectReference::unsafe_arena_release_local_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:tensorflow.CheckpointableObjectGraph.CheckpointableObject.ObjectReference.local_name)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return local_name_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void CheckpointableObjectGraph_CheckpointableObject_ObjectReference::unsafe_arena_set_allocated_local_name(
    ::std::string* local_name) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (local_name != NULL) {
    
  } else {
    
  }
  local_name_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      local_name, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tensorflow.CheckpointableObjectGraph.CheckpointableObject.ObjectReference.local_name)
}

// -------------------------------------------------------------------

// CheckpointableObjectGraph_CheckpointableObject_SerializedTensor

// string name = 1;
inline void CheckpointableObjectGraph_CheckpointableObject_SerializedTensor::clear_name() {
  name_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& CheckpointableObjectGraph_CheckpointableObject_SerializedTensor::name() const {
  // @@protoc_insertion_point(field_get:tensorflow.CheckpointableObjectGraph.CheckpointableObject.SerializedTensor.name)
  return name_.Get();
}
inline void CheckpointableObjectGraph_CheckpointableObject_SerializedTensor::set_name(const ::std::string& value) {
  
  name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:tensorflow.CheckpointableObjectGraph.CheckpointableObject.SerializedTensor.name)
}
#if LANG_CXX11
inline void CheckpointableObjectGraph_CheckpointableObject_SerializedTensor::set_name(::std::string&& value) {
  
  name_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:tensorflow.CheckpointableObjectGraph.CheckpointableObject.SerializedTensor.name)
}
#endif
inline void CheckpointableObjectGraph_CheckpointableObject_SerializedTensor::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:tensorflow.CheckpointableObjectGraph.CheckpointableObject.SerializedTensor.name)
}
inline void CheckpointableObjectGraph_CheckpointableObject_SerializedTensor::set_name(const char* value,
    size_t size) {
  
  name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:tensorflow.CheckpointableObjectGraph.CheckpointableObject.SerializedTensor.name)
}
inline ::std::string* CheckpointableObjectGraph_CheckpointableObject_SerializedTensor::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:tensorflow.CheckpointableObjectGraph.CheckpointableObject.SerializedTensor.name)
  return name_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* CheckpointableObjectGraph_CheckpointableObject_SerializedTensor::release_name() {
  // @@protoc_insertion_point(field_release:tensorflow.CheckpointableObjectGraph.CheckpointableObject.SerializedTensor.name)
  
  return name_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void CheckpointableObjectGraph_CheckpointableObject_SerializedTensor::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:tensorflow.CheckpointableObjectGraph.CheckpointableObject.SerializedTensor.name)
}
inline ::std::string* CheckpointableObjectGraph_CheckpointableObject_SerializedTensor::unsafe_arena_release_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:tensorflow.CheckpointableObjectGraph.CheckpointableObject.SerializedTensor.name)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return name_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void CheckpointableObjectGraph_CheckpointableObject_SerializedTensor::unsafe_arena_set_allocated_name(
    ::std::string* name) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (name != NULL) {
    
  } else {
    
  }
  name_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      name, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tensorflow.CheckpointableObjectGraph.CheckpointableObject.SerializedTensor.name)
}

// string full_name = 2;
inline void CheckpointableObjectGraph_CheckpointableObject_SerializedTensor::clear_full_name() {
  full_name_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& CheckpointableObjectGraph_CheckpointableObject_SerializedTensor::full_name() const {
  // @@protoc_insertion_point(field_get:tensorflow.CheckpointableObjectGraph.CheckpointableObject.SerializedTensor.full_name)
  return full_name_.Get();
}
inline void CheckpointableObjectGraph_CheckpointableObject_SerializedTensor::set_full_name(const ::std::string& value) {
  
  full_name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:tensorflow.CheckpointableObjectGraph.CheckpointableObject.SerializedTensor.full_name)
}
#if LANG_CXX11
inline void CheckpointableObjectGraph_CheckpointableObject_SerializedTensor::set_full_name(::std::string&& value) {
  
  full_name_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:tensorflow.CheckpointableObjectGraph.CheckpointableObject.SerializedTensor.full_name)
}
#endif
inline void CheckpointableObjectGraph_CheckpointableObject_SerializedTensor::set_full_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  full_name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:tensorflow.CheckpointableObjectGraph.CheckpointableObject.SerializedTensor.full_name)
}
inline void CheckpointableObjectGraph_CheckpointableObject_SerializedTensor::set_full_name(const char* value,
    size_t size) {
  
  full_name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:tensorflow.CheckpointableObjectGraph.CheckpointableObject.SerializedTensor.full_name)
}
inline ::std::string* CheckpointableObjectGraph_CheckpointableObject_SerializedTensor::mutable_full_name() {
  
  // @@protoc_insertion_point(field_mutable:tensorflow.CheckpointableObjectGraph.CheckpointableObject.SerializedTensor.full_name)
  return full_name_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* CheckpointableObjectGraph_CheckpointableObject_SerializedTensor::release_full_name() {
  // @@protoc_insertion_point(field_release:tensorflow.CheckpointableObjectGraph.CheckpointableObject.SerializedTensor.full_name)
  
  return full_name_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void CheckpointableObjectGraph_CheckpointableObject_SerializedTensor::set_allocated_full_name(::std::string* full_name) {
  if (full_name != NULL) {
    
  } else {
    
  }
  full_name_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), full_name,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:tensorflow.CheckpointableObjectGraph.CheckpointableObject.SerializedTensor.full_name)
}
inline ::std::string* CheckpointableObjectGraph_CheckpointableObject_SerializedTensor::unsafe_arena_release_full_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:tensorflow.CheckpointableObjectGraph.CheckpointableObject.SerializedTensor.full_name)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return full_name_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void CheckpointableObjectGraph_CheckpointableObject_SerializedTensor::unsafe_arena_set_allocated_full_name(
    ::std::string* full_name) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (full_name != NULL) {
    
  } else {
    
  }
  full_name_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      full_name, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tensorflow.CheckpointableObjectGraph.CheckpointableObject.SerializedTensor.full_name)
}

// string checkpoint_key = 3;
inline void CheckpointableObjectGraph_CheckpointableObject_SerializedTensor::clear_checkpoint_key() {
  checkpoint_key_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& CheckpointableObjectGraph_CheckpointableObject_SerializedTensor::checkpoint_key() const {
  // @@protoc_insertion_point(field_get:tensorflow.CheckpointableObjectGraph.CheckpointableObject.SerializedTensor.checkpoint_key)
  return checkpoint_key_.Get();
}
inline void CheckpointableObjectGraph_CheckpointableObject_SerializedTensor::set_checkpoint_key(const ::std::string& value) {
  
  checkpoint_key_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:tensorflow.CheckpointableObjectGraph.CheckpointableObject.SerializedTensor.checkpoint_key)
}
#if LANG_CXX11
inline void CheckpointableObjectGraph_CheckpointableObject_SerializedTensor::set_checkpoint_key(::std::string&& value) {
  
  checkpoint_key_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:tensorflow.CheckpointableObjectGraph.CheckpointableObject.SerializedTensor.checkpoint_key)
}
#endif
inline void CheckpointableObjectGraph_CheckpointableObject_SerializedTensor::set_checkpoint_key(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  checkpoint_key_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:tensorflow.CheckpointableObjectGraph.CheckpointableObject.SerializedTensor.checkpoint_key)
}
inline void CheckpointableObjectGraph_CheckpointableObject_SerializedTensor::set_checkpoint_key(const char* value,
    size_t size) {
  
  checkpoint_key_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:tensorflow.CheckpointableObjectGraph.CheckpointableObject.SerializedTensor.checkpoint_key)
}
inline ::std::string* CheckpointableObjectGraph_CheckpointableObject_SerializedTensor::mutable_checkpoint_key() {
  
  // @@protoc_insertion_point(field_mutable:tensorflow.CheckpointableObjectGraph.CheckpointableObject.SerializedTensor.checkpoint_key)
  return checkpoint_key_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* CheckpointableObjectGraph_CheckpointableObject_SerializedTensor::release_checkpoint_key() {
  // @@protoc_insertion_point(field_release:tensorflow.CheckpointableObjectGraph.CheckpointableObject.SerializedTensor.checkpoint_key)
  
  return checkpoint_key_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void CheckpointableObjectGraph_CheckpointableObject_SerializedTensor::set_allocated_checkpoint_key(::std::string* checkpoint_key) {
  if (checkpoint_key != NULL) {
    
  } else {
    
  }
  checkpoint_key_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), checkpoint_key,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:tensorflow.CheckpointableObjectGraph.CheckpointableObject.SerializedTensor.checkpoint_key)
}
inline ::std::string* CheckpointableObjectGraph_CheckpointableObject_SerializedTensor::unsafe_arena_release_checkpoint_key() {
  // @@protoc_insertion_point(field_unsafe_arena_release:tensorflow.CheckpointableObjectGraph.CheckpointableObject.SerializedTensor.checkpoint_key)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return checkpoint_key_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void CheckpointableObjectGraph_CheckpointableObject_SerializedTensor::unsafe_arena_set_allocated_checkpoint_key(
    ::std::string* checkpoint_key) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (checkpoint_key != NULL) {
    
  } else {
    
  }
  checkpoint_key_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      checkpoint_key, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tensorflow.CheckpointableObjectGraph.CheckpointableObject.SerializedTensor.checkpoint_key)
}

// -------------------------------------------------------------------

// CheckpointableObjectGraph_CheckpointableObject_SlotVariableReference

// int32 original_variable_node_id = 1;
inline void CheckpointableObjectGraph_CheckpointableObject_SlotVariableReference::clear_original_variable_node_id() {
  original_variable_node_id_ = 0;
}
inline ::google::protobuf::int32 CheckpointableObjectGraph_CheckpointableObject_SlotVariableReference::original_variable_node_id() const {
  // @@protoc_insertion_point(field_get:tensorflow.CheckpointableObjectGraph.CheckpointableObject.SlotVariableReference.original_variable_node_id)
  return original_variable_node_id_;
}
inline void CheckpointableObjectGraph_CheckpointableObject_SlotVariableReference::set_original_variable_node_id(::google::protobuf::int32 value) {
  
  original_variable_node_id_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.CheckpointableObjectGraph.CheckpointableObject.SlotVariableReference.original_variable_node_id)
}

// string slot_name = 2;
inline void CheckpointableObjectGraph_CheckpointableObject_SlotVariableReference::clear_slot_name() {
  slot_name_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& CheckpointableObjectGraph_CheckpointableObject_SlotVariableReference::slot_name() const {
  // @@protoc_insertion_point(field_get:tensorflow.CheckpointableObjectGraph.CheckpointableObject.SlotVariableReference.slot_name)
  return slot_name_.Get();
}
inline void CheckpointableObjectGraph_CheckpointableObject_SlotVariableReference::set_slot_name(const ::std::string& value) {
  
  slot_name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:tensorflow.CheckpointableObjectGraph.CheckpointableObject.SlotVariableReference.slot_name)
}
#if LANG_CXX11
inline void CheckpointableObjectGraph_CheckpointableObject_SlotVariableReference::set_slot_name(::std::string&& value) {
  
  slot_name_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:tensorflow.CheckpointableObjectGraph.CheckpointableObject.SlotVariableReference.slot_name)
}
#endif
inline void CheckpointableObjectGraph_CheckpointableObject_SlotVariableReference::set_slot_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  slot_name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:tensorflow.CheckpointableObjectGraph.CheckpointableObject.SlotVariableReference.slot_name)
}
inline void CheckpointableObjectGraph_CheckpointableObject_SlotVariableReference::set_slot_name(const char* value,
    size_t size) {
  
  slot_name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:tensorflow.CheckpointableObjectGraph.CheckpointableObject.SlotVariableReference.slot_name)
}
inline ::std::string* CheckpointableObjectGraph_CheckpointableObject_SlotVariableReference::mutable_slot_name() {
  
  // @@protoc_insertion_point(field_mutable:tensorflow.CheckpointableObjectGraph.CheckpointableObject.SlotVariableReference.slot_name)
  return slot_name_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* CheckpointableObjectGraph_CheckpointableObject_SlotVariableReference::release_slot_name() {
  // @@protoc_insertion_point(field_release:tensorflow.CheckpointableObjectGraph.CheckpointableObject.SlotVariableReference.slot_name)
  
  return slot_name_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void CheckpointableObjectGraph_CheckpointableObject_SlotVariableReference::set_allocated_slot_name(::std::string* slot_name) {
  if (slot_name != NULL) {
    
  } else {
    
  }
  slot_name_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), slot_name,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:tensorflow.CheckpointableObjectGraph.CheckpointableObject.SlotVariableReference.slot_name)
}
inline ::std::string* CheckpointableObjectGraph_CheckpointableObject_SlotVariableReference::unsafe_arena_release_slot_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:tensorflow.CheckpointableObjectGraph.CheckpointableObject.SlotVariableReference.slot_name)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return slot_name_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void CheckpointableObjectGraph_CheckpointableObject_SlotVariableReference::unsafe_arena_set_allocated_slot_name(
    ::std::string* slot_name) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (slot_name != NULL) {
    
  } else {
    
  }
  slot_name_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      slot_name, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tensorflow.CheckpointableObjectGraph.CheckpointableObject.SlotVariableReference.slot_name)
}

// int32 slot_variable_node_id = 3;
inline void CheckpointableObjectGraph_CheckpointableObject_SlotVariableReference::clear_slot_variable_node_id() {
  slot_variable_node_id_ = 0;
}
inline ::google::protobuf::int32 CheckpointableObjectGraph_CheckpointableObject_SlotVariableReference::slot_variable_node_id() const {
  // @@protoc_insertion_point(field_get:tensorflow.CheckpointableObjectGraph.CheckpointableObject.SlotVariableReference.slot_variable_node_id)
  return slot_variable_node_id_;
}
inline void CheckpointableObjectGraph_CheckpointableObject_SlotVariableReference::set_slot_variable_node_id(::google::protobuf::int32 value) {
  
  slot_variable_node_id_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.CheckpointableObjectGraph.CheckpointableObject.SlotVariableReference.slot_variable_node_id)
}

// -------------------------------------------------------------------

// CheckpointableObjectGraph_CheckpointableObject

// repeated .tensorflow.CheckpointableObjectGraph.CheckpointableObject.ObjectReference children = 1;
inline int CheckpointableObjectGraph_CheckpointableObject::children_size() const {
  return children_.size();
}
inline void CheckpointableObjectGraph_CheckpointableObject::clear_children() {
  children_.Clear();
}
inline ::tensorflow::CheckpointableObjectGraph_CheckpointableObject_ObjectReference* CheckpointableObjectGraph_CheckpointableObject::mutable_children(int index) {
  // @@protoc_insertion_point(field_mutable:tensorflow.CheckpointableObjectGraph.CheckpointableObject.children)
  return children_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::tensorflow::CheckpointableObjectGraph_CheckpointableObject_ObjectReference >*
CheckpointableObjectGraph_CheckpointableObject::mutable_children() {
  // @@protoc_insertion_point(field_mutable_list:tensorflow.CheckpointableObjectGraph.CheckpointableObject.children)
  return &children_;
}
inline const ::tensorflow::CheckpointableObjectGraph_CheckpointableObject_ObjectReference& CheckpointableObjectGraph_CheckpointableObject::children(int index) const {
  // @@protoc_insertion_point(field_get:tensorflow.CheckpointableObjectGraph.CheckpointableObject.children)
  return children_.Get(index);
}
inline ::tensorflow::CheckpointableObjectGraph_CheckpointableObject_ObjectReference* CheckpointableObjectGraph_CheckpointableObject::add_children() {
  // @@protoc_insertion_point(field_add:tensorflow.CheckpointableObjectGraph.CheckpointableObject.children)
  return children_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::tensorflow::CheckpointableObjectGraph_CheckpointableObject_ObjectReference >&
CheckpointableObjectGraph_CheckpointableObject::children() const {
  // @@protoc_insertion_point(field_list:tensorflow.CheckpointableObjectGraph.CheckpointableObject.children)
  return children_;
}

// repeated .tensorflow.CheckpointableObjectGraph.CheckpointableObject.SerializedTensor attributes = 2;
inline int CheckpointableObjectGraph_CheckpointableObject::attributes_size() const {
  return attributes_.size();
}
inline void CheckpointableObjectGraph_CheckpointableObject::clear_attributes() {
  attributes_.Clear();
}
inline ::tensorflow::CheckpointableObjectGraph_CheckpointableObject_SerializedTensor* CheckpointableObjectGraph_CheckpointableObject::mutable_attributes(int index) {
  // @@protoc_insertion_point(field_mutable:tensorflow.CheckpointableObjectGraph.CheckpointableObject.attributes)
  return attributes_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::tensorflow::CheckpointableObjectGraph_CheckpointableObject_SerializedTensor >*
CheckpointableObjectGraph_CheckpointableObject::mutable_attributes() {
  // @@protoc_insertion_point(field_mutable_list:tensorflow.CheckpointableObjectGraph.CheckpointableObject.attributes)
  return &attributes_;
}
inline const ::tensorflow::CheckpointableObjectGraph_CheckpointableObject_SerializedTensor& CheckpointableObjectGraph_CheckpointableObject::attributes(int index) const {
  // @@protoc_insertion_point(field_get:tensorflow.CheckpointableObjectGraph.CheckpointableObject.attributes)
  return attributes_.Get(index);
}
inline ::tensorflow::CheckpointableObjectGraph_CheckpointableObject_SerializedTensor* CheckpointableObjectGraph_CheckpointableObject::add_attributes() {
  // @@protoc_insertion_point(field_add:tensorflow.CheckpointableObjectGraph.CheckpointableObject.attributes)
  return attributes_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::tensorflow::CheckpointableObjectGraph_CheckpointableObject_SerializedTensor >&
CheckpointableObjectGraph_CheckpointableObject::attributes() const {
  // @@protoc_insertion_point(field_list:tensorflow.CheckpointableObjectGraph.CheckpointableObject.attributes)
  return attributes_;
}

// repeated .tensorflow.CheckpointableObjectGraph.CheckpointableObject.SlotVariableReference slot_variables = 3;
inline int CheckpointableObjectGraph_CheckpointableObject::slot_variables_size() const {
  return slot_variables_.size();
}
inline void CheckpointableObjectGraph_CheckpointableObject::clear_slot_variables() {
  slot_variables_.Clear();
}
inline ::tensorflow::CheckpointableObjectGraph_CheckpointableObject_SlotVariableReference* CheckpointableObjectGraph_CheckpointableObject::mutable_slot_variables(int index) {
  // @@protoc_insertion_point(field_mutable:tensorflow.CheckpointableObjectGraph.CheckpointableObject.slot_variables)
  return slot_variables_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::tensorflow::CheckpointableObjectGraph_CheckpointableObject_SlotVariableReference >*
CheckpointableObjectGraph_CheckpointableObject::mutable_slot_variables() {
  // @@protoc_insertion_point(field_mutable_list:tensorflow.CheckpointableObjectGraph.CheckpointableObject.slot_variables)
  return &slot_variables_;
}
inline const ::tensorflow::CheckpointableObjectGraph_CheckpointableObject_SlotVariableReference& CheckpointableObjectGraph_CheckpointableObject::slot_variables(int index) const {
  // @@protoc_insertion_point(field_get:tensorflow.CheckpointableObjectGraph.CheckpointableObject.slot_variables)
  return slot_variables_.Get(index);
}
inline ::tensorflow::CheckpointableObjectGraph_CheckpointableObject_SlotVariableReference* CheckpointableObjectGraph_CheckpointableObject::add_slot_variables() {
  // @@protoc_insertion_point(field_add:tensorflow.CheckpointableObjectGraph.CheckpointableObject.slot_variables)
  return slot_variables_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::tensorflow::CheckpointableObjectGraph_CheckpointableObject_SlotVariableReference >&
CheckpointableObjectGraph_CheckpointableObject::slot_variables() const {
  // @@protoc_insertion_point(field_list:tensorflow.CheckpointableObjectGraph.CheckpointableObject.slot_variables)
  return slot_variables_;
}

// -------------------------------------------------------------------

// CheckpointableObjectGraph

// repeated .tensorflow.CheckpointableObjectGraph.CheckpointableObject nodes = 1;
inline int CheckpointableObjectGraph::nodes_size() const {
  return nodes_.size();
}
inline void CheckpointableObjectGraph::clear_nodes() {
  nodes_.Clear();
}
inline ::tensorflow::CheckpointableObjectGraph_CheckpointableObject* CheckpointableObjectGraph::mutable_nodes(int index) {
  // @@protoc_insertion_point(field_mutable:tensorflow.CheckpointableObjectGraph.nodes)
  return nodes_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::tensorflow::CheckpointableObjectGraph_CheckpointableObject >*
CheckpointableObjectGraph::mutable_nodes() {
  // @@protoc_insertion_point(field_mutable_list:tensorflow.CheckpointableObjectGraph.nodes)
  return &nodes_;
}
inline const ::tensorflow::CheckpointableObjectGraph_CheckpointableObject& CheckpointableObjectGraph::nodes(int index) const {
  // @@protoc_insertion_point(field_get:tensorflow.CheckpointableObjectGraph.nodes)
  return nodes_.Get(index);
}
inline ::tensorflow::CheckpointableObjectGraph_CheckpointableObject* CheckpointableObjectGraph::add_nodes() {
  // @@protoc_insertion_point(field_add:tensorflow.CheckpointableObjectGraph.nodes)
  return nodes_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::tensorflow::CheckpointableObjectGraph_CheckpointableObject >&
CheckpointableObjectGraph::nodes() const {
  // @@protoc_insertion_point(field_list:tensorflow.CheckpointableObjectGraph.nodes)
  return nodes_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace tensorflow

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_tensorflow_2fcore_2fprotobuf_2fcheckpointable_5fobject_5fgraph_2eproto
