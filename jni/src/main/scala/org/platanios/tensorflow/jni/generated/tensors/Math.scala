/* DO NOT EDIT THIS FILE - it is machine generated */

/* Copyright 2017, Emmanouil Antonios Platanios. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not
 * use this file except in compliance with the License. You may obtain a copy of
 * the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
 * License for the specific language governing permissions and limitations under
 * the License.
 */

package org.platanios.tensorflow.jni.generated.tensors

import org.platanios.tensorflow.jni.TensorFlow

object Math {
  TensorFlow.load()

  @native def select(contextHandle: Long, condition: Long, t: Long, e: Long): Long
  @native def range(contextHandle: Long, start: Long, limit: Long, delta: Long): Long
  @native def linSpace(contextHandle: Long, start: Long, stop: Long, num: Long): Long
  @native def cast(contextHandle: Long, x: Long, dstT: Int): Long
  @native def bitcast(contextHandle: Long, input: Long, _type: Int): Long
  @native def addN(contextHandle: Long, inputs: Array[Long]): Long
  @native def abs(contextHandle: Long, x: Long): Long
  @native def complexAbs(contextHandle: Long, x: Long, tout: Int): Long
  @native def neg(contextHandle: Long, x: Long): Long
  @native def reciprocal(contextHandle: Long, x: Long): Long
  @native def square(contextHandle: Long, x: Long): Long
  @native def sqrt(contextHandle: Long, x: Long): Long
  @native def rsqrt(contextHandle: Long, x: Long): Long
  @native def exp(contextHandle: Long, x: Long): Long
  @native def expm1(contextHandle: Long, x: Long): Long
  @native def log(contextHandle: Long, x: Long): Long
  @native def log1p(contextHandle: Long, x: Long): Long
  @native def sin(contextHandle: Long, x: Long): Long
  @native def cos(contextHandle: Long, x: Long): Long
  @native def tan(contextHandle: Long, x: Long): Long
  @native def asin(contextHandle: Long, x: Long): Long
  @native def acos(contextHandle: Long, x: Long): Long
  @native def atan(contextHandle: Long, x: Long): Long
  @native def sinh(contextHandle: Long, x: Long): Long
  @native def cosh(contextHandle: Long, x: Long): Long
  @native def tanh(contextHandle: Long, x: Long): Long
  @native def asinh(contextHandle: Long, x: Long): Long
  @native def acosh(contextHandle: Long, x: Long): Long
  @native def atanh(contextHandle: Long, x: Long): Long
  @native def lgamma(contextHandle: Long, x: Long): Long
  @native def digamma(contextHandle: Long, x: Long): Long
  @native def erf(contextHandle: Long, x: Long): Long
  @native def erfc(contextHandle: Long, x: Long): Long
  @native def sigmoid(contextHandle: Long, x: Long): Long
  @native def sign(contextHandle: Long, x: Long): Long
  @native def round(contextHandle: Long, x: Long): Long
  @native def rint(contextHandle: Long, x: Long): Long
  @native def floor(contextHandle: Long, x: Long): Long
  @native def ceil(contextHandle: Long, x: Long): Long
  @native def isNan(contextHandle: Long, x: Long): Long
  @native def isInf(contextHandle: Long, x: Long): Long
  @native def isFinite(contextHandle: Long, x: Long): Long
  @native def add(contextHandle: Long, x: Long, y: Long): Long
  @native def sub(contextHandle: Long, x: Long, y: Long): Long
  @native def mul(contextHandle: Long, x: Long, y: Long): Long
  @native def div(contextHandle: Long, x: Long, y: Long): Long
  @native def floorDiv(contextHandle: Long, x: Long, y: Long): Long
  @native def truncateDiv(contextHandle: Long, x: Long, y: Long): Long
  @native def realDiv(contextHandle: Long, x: Long, y: Long): Long
  @native def squaredDifference(contextHandle: Long, x: Long, y: Long): Long
  @native def mod(contextHandle: Long, x: Long, y: Long): Long
  @native def floorMod(contextHandle: Long, x: Long, y: Long): Long
  @native def truncateMod(contextHandle: Long, x: Long, y: Long): Long
  @native def pow(contextHandle: Long, x: Long, y: Long): Long
  @native def igammac(contextHandle: Long, a: Long, x: Long): Long
  @native def igamma(contextHandle: Long, a: Long, x: Long): Long
  @native def zeta(contextHandle: Long, x: Long, q: Long): Long
  @native def polygamma(contextHandle: Long, a: Long, x: Long): Long
  @native def atan2(contextHandle: Long, y: Long, x: Long): Long
  @native def maximum(contextHandle: Long, x: Long, y: Long): Long
  @native def minimum(contextHandle: Long, x: Long, y: Long): Long
  @native def betainc(contextHandle: Long, a: Long, b: Long, x: Long): Long
  @native def logicalNot(contextHandle: Long, x: Long): Long
  @native def logicalAnd(contextHandle: Long, x: Long, y: Long): Long
  @native def logicalOr(contextHandle: Long, x: Long, y: Long): Long
  @native def equal(contextHandle: Long, x: Long, y: Long): Long
  @native def notEqual(contextHandle: Long, x: Long, y: Long): Long
  @native def approximateEqual(contextHandle: Long, x: Long, y: Long, tolerance: Float): Long
  @native def less(contextHandle: Long, x: Long, y: Long): Long
  @native def lessEqual(contextHandle: Long, x: Long, y: Long): Long
  @native def greater(contextHandle: Long, x: Long, y: Long): Long
  @native def greaterEqual(contextHandle: Long, x: Long, y: Long): Long
  @native def sum(contextHandle: Long, input: Long, reduction_indices: Long, keep_dims: Boolean): Long
  @native def mean(contextHandle: Long, input: Long, reduction_indices: Long, keep_dims: Boolean): Long
  @native def prod(contextHandle: Long, input: Long, reduction_indices: Long, keep_dims: Boolean): Long
  @native def min(contextHandle: Long, input: Long, reduction_indices: Long, keep_dims: Boolean): Long
  @native def max(contextHandle: Long, input: Long, reduction_indices: Long, keep_dims: Boolean): Long
  @native def all(contextHandle: Long, input: Long, reduction_indices: Long, keep_dims: Boolean): Long
  @native def any(contextHandle: Long, input: Long, reduction_indices: Long, keep_dims: Boolean): Long
  @native def argMax(contextHandle: Long, input: Long, dimension: Long, output_type: Int): Long
  @native def argMin(contextHandle: Long, input: Long, dimension: Long, output_type: Int): Long
  @native def bincount(contextHandle: Long, arr: Long, size: Long, weights: Long): Long
  @native def cumsum(contextHandle: Long, x: Long, axis: Long, exclusive: Boolean, reverse: Boolean): Long
  @native def cumprod(contextHandle: Long, x: Long, axis: Long, exclusive: Boolean, reverse: Boolean): Long
  @native def segmentSum(contextHandle: Long, data: Long, segment_ids: Long): Long
  @native def segmentMean(contextHandle: Long, data: Long, segment_ids: Long): Long
  @native def segmentProd(contextHandle: Long, data: Long, segment_ids: Long): Long
  @native def segmentMin(contextHandle: Long, data: Long, segment_ids: Long): Long
  @native def segmentMax(contextHandle: Long, data: Long, segment_ids: Long): Long
  @native def unsortedSegmentSum(contextHandle: Long, data: Long, segment_ids: Long, num_segments: Long): Long
  @native def unsortedSegmentMax(contextHandle: Long, data: Long, segment_ids: Long, num_segments: Long): Long
  @native def sparseSegmentSum(contextHandle: Long, data: Long, indices: Long, segment_ids: Long): Long
  @native def sparseSegmentMean(contextHandle: Long, data: Long, indices: Long, segment_ids: Long): Long
  @native def sparseSegmentSqrtN(contextHandle: Long, data: Long, indices: Long, segment_ids: Long): Long
  @native def sparseSegmentSumWithNumSegments(contextHandle: Long, data: Long, indices: Long, segment_ids: Long, num_segments: Long): Long
  @native def sparseSegmentMeanWithNumSegments(contextHandle: Long, data: Long, indices: Long, segment_ids: Long, num_segments: Long): Long
  @native def sparseSegmentSqrtNWithNumSegments(contextHandle: Long, data: Long, indices: Long, segment_ids: Long, num_segments: Long): Long
  @native def diag(contextHandle: Long, diagonal: Long): Long
  @native def diagPart(contextHandle: Long, input: Long): Long
  @native def matrixDiag(contextHandle: Long, diagonal: Long): Long
  @native def matrixSetDiag(contextHandle: Long, input: Long, diagonal: Long): Long
  @native def matrixDiagPart(contextHandle: Long, input: Long): Long
  @native def matrixBandPart(contextHandle: Long, input: Long, num_lower: Long, num_upper: Long): Long
  @native def matMul(contextHandle: Long, a: Long, b: Long, transpose_a: Boolean, transpose_b: Boolean): Long
  @native def batchMatMul(contextHandle: Long, x: Long, y: Long, adj_x: Boolean, adj_y: Boolean): Long
  @native def sparseMatMul(contextHandle: Long, a: Long, b: Long, transpose_a: Boolean, transpose_b: Boolean, a_is_sparse: Boolean, b_is_sparse: Boolean): Long
  @native def cross(contextHandle: Long, a: Long, b: Long): Long
  @native def complex(contextHandle: Long, real: Long, imag: Long, tout: Int): Long
  @native def real(contextHandle: Long, input: Long, tout: Int): Long
  @native def imag(contextHandle: Long, input: Long, tout: Int): Long
  @native def angle(contextHandle: Long, input: Long, tout: Int): Long
  @native def conj(contextHandle: Long, input: Long): Long
  @native def bucketize(contextHandle: Long, input: Long, boundaries: Array[Float]): Long
  @native def quantizedAdd(contextHandle: Long, x: Long, y: Long, min_x: Long, max_x: Long, min_y: Long, max_y: Long, toutput: Int): Array[Long]
  @native def quantizedMul(contextHandle: Long, x: Long, y: Long, min_x: Long, max_x: Long, min_y: Long, max_y: Long, toutput: Int): Array[Long]
  @native def quantizedMatMul(contextHandle: Long, a: Long, b: Long, min_a: Long, max_a: Long, min_b: Long, max_b: Long, toutput: Int, transpose_a: Boolean, transpose_b: Boolean, tactivation: Int): Array[Long]
  @native def quantizeDownAndShrinkRange(contextHandle: Long, input: Long, input_min: Long, input_max: Long, out_type: Int): Array[Long]
  @native def requantize(contextHandle: Long, input: Long, input_min: Long, input_max: Long, requested_output_min: Long, requested_output_max: Long, out_type: Int): Array[Long]
  @native def requantizationRange(contextHandle: Long, input: Long, input_min: Long, input_max: Long): Array[Long]
  @native def compareAndBitpack(contextHandle: Long, input: Long, threshold: Long): Long
}
