// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: tensorflow/core/util/saved_tensor_slice.proto

#ifndef PROTOBUF_tensorflow_2fcore_2futil_2fsaved_5ftensor_5fslice_2eproto__INCLUDED
#define PROTOBUF_tensorflow_2fcore_2futil_2fsaved_5ftensor_5fslice_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3004000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "tensorflow/core/framework/tensor_shape.pb.h"
#include "tensorflow/core/framework/tensor_slice.pb.h"
#include "tensorflow/core/framework/tensor.pb.h"
#include "tensorflow/core/framework/types.pb.h"
#include "tensorflow/core/framework/versions.pb.h"
// @@protoc_insertion_point(includes)
namespace tensorflow {
class SavedSlice;
class SavedSliceDefaultTypeInternal;
extern SavedSliceDefaultTypeInternal _SavedSlice_default_instance_;
class SavedSliceMeta;
class SavedSliceMetaDefaultTypeInternal;
extern SavedSliceMetaDefaultTypeInternal _SavedSliceMeta_default_instance_;
class SavedTensorSliceMeta;
class SavedTensorSliceMetaDefaultTypeInternal;
extern SavedTensorSliceMetaDefaultTypeInternal _SavedTensorSliceMeta_default_instance_;
class SavedTensorSlices;
class SavedTensorSlicesDefaultTypeInternal;
extern SavedTensorSlicesDefaultTypeInternal _SavedTensorSlices_default_instance_;
}  // namespace tensorflow

namespace tensorflow {

namespace protobuf_tensorflow_2fcore_2futil_2fsaved_5ftensor_5fslice_2eproto {
// Internal implementation detail -- do not call these.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[];
  static const ::google::protobuf::uint32 offsets[];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static void InitDefaultsImpl();
};
void AddDescriptors();
void InitDefaults();
}  // namespace protobuf_tensorflow_2fcore_2futil_2fsaved_5ftensor_5fslice_2eproto

// ===================================================================

class SavedSliceMeta : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:tensorflow.SavedSliceMeta) */ {
 public:
  SavedSliceMeta();
  virtual ~SavedSliceMeta();

  SavedSliceMeta(const SavedSliceMeta& from);

  inline SavedSliceMeta& operator=(const SavedSliceMeta& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SavedSliceMeta(SavedSliceMeta&& from) noexcept
    : SavedSliceMeta() {
    *this = ::std::move(from);
  }

  inline SavedSliceMeta& operator=(SavedSliceMeta&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline ::google::protobuf::Arena* GetArena() const PROTOBUF_FINAL {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const PROTOBUF_FINAL {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const SavedSliceMeta& default_instance();

  static inline const SavedSliceMeta* internal_default_instance() {
    return reinterpret_cast<const SavedSliceMeta*>(
               &_SavedSliceMeta_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void UnsafeArenaSwap(SavedSliceMeta* other);
  void Swap(SavedSliceMeta* other);
  friend void swap(SavedSliceMeta& a, SavedSliceMeta& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SavedSliceMeta* New() const PROTOBUF_FINAL { return New(NULL); }

  SavedSliceMeta* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const SavedSliceMeta& from);
  void MergeFrom(const SavedSliceMeta& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(SavedSliceMeta* other);
  protected:
  explicit SavedSliceMeta(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .tensorflow.TensorSliceProto slice = 4;
  int slice_size() const;
  void clear_slice();
  static const int kSliceFieldNumber = 4;
  const ::tensorflow::TensorSliceProto& slice(int index) const;
  ::tensorflow::TensorSliceProto* mutable_slice(int index);
  ::tensorflow::TensorSliceProto* add_slice();
  ::google::protobuf::RepeatedPtrField< ::tensorflow::TensorSliceProto >*
      mutable_slice();
  const ::google::protobuf::RepeatedPtrField< ::tensorflow::TensorSliceProto >&
      slice() const;

  // string name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);
  ::std::string* unsafe_arena_release_name();
  void unsafe_arena_set_allocated_name(
      ::std::string* name);

  // .tensorflow.TensorShapeProto shape = 2;
  bool has_shape() const;
  void clear_shape();
  static const int kShapeFieldNumber = 2;
  private:
  void _slow_mutable_shape();
  void _slow_set_allocated_shape(
      ::google::protobuf::Arena* message_arena, ::tensorflow::TensorShapeProto** shape);
  ::tensorflow::TensorShapeProto* _slow_release_shape();
  public:
  const ::tensorflow::TensorShapeProto& shape() const;
  ::tensorflow::TensorShapeProto* mutable_shape();
  ::tensorflow::TensorShapeProto* release_shape();
  void set_allocated_shape(::tensorflow::TensorShapeProto* shape);
  ::tensorflow::TensorShapeProto* unsafe_arena_release_shape();
  void unsafe_arena_set_allocated_shape(
      ::tensorflow::TensorShapeProto* shape);

  // .tensorflow.DataType type = 3;
  void clear_type();
  static const int kTypeFieldNumber = 3;
  ::tensorflow::DataType type() const;
  void set_type(::tensorflow::DataType value);

  // @@protoc_insertion_point(class_scope:tensorflow.SavedSliceMeta)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::RepeatedPtrField< ::tensorflow::TensorSliceProto > slice_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::tensorflow::TensorShapeProto* shape_;
  int type_;
  mutable int _cached_size_;
  friend struct protobuf_tensorflow_2fcore_2futil_2fsaved_5ftensor_5fslice_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SavedTensorSliceMeta : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:tensorflow.SavedTensorSliceMeta) */ {
 public:
  SavedTensorSliceMeta();
  virtual ~SavedTensorSliceMeta();

  SavedTensorSliceMeta(const SavedTensorSliceMeta& from);

  inline SavedTensorSliceMeta& operator=(const SavedTensorSliceMeta& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SavedTensorSliceMeta(SavedTensorSliceMeta&& from) noexcept
    : SavedTensorSliceMeta() {
    *this = ::std::move(from);
  }

  inline SavedTensorSliceMeta& operator=(SavedTensorSliceMeta&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline ::google::protobuf::Arena* GetArena() const PROTOBUF_FINAL {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const PROTOBUF_FINAL {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const SavedTensorSliceMeta& default_instance();

  static inline const SavedTensorSliceMeta* internal_default_instance() {
    return reinterpret_cast<const SavedTensorSliceMeta*>(
               &_SavedTensorSliceMeta_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void UnsafeArenaSwap(SavedTensorSliceMeta* other);
  void Swap(SavedTensorSliceMeta* other);
  friend void swap(SavedTensorSliceMeta& a, SavedTensorSliceMeta& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SavedTensorSliceMeta* New() const PROTOBUF_FINAL { return New(NULL); }

  SavedTensorSliceMeta* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const SavedTensorSliceMeta& from);
  void MergeFrom(const SavedTensorSliceMeta& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(SavedTensorSliceMeta* other);
  protected:
  explicit SavedTensorSliceMeta(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .tensorflow.SavedSliceMeta tensor = 1;
  int tensor_size() const;
  void clear_tensor();
  static const int kTensorFieldNumber = 1;
  const ::tensorflow::SavedSliceMeta& tensor(int index) const;
  ::tensorflow::SavedSliceMeta* mutable_tensor(int index);
  ::tensorflow::SavedSliceMeta* add_tensor();
  ::google::protobuf::RepeatedPtrField< ::tensorflow::SavedSliceMeta >*
      mutable_tensor();
  const ::google::protobuf::RepeatedPtrField< ::tensorflow::SavedSliceMeta >&
      tensor() const;

  // .tensorflow.VersionDef versions = 2;
  bool has_versions() const;
  void clear_versions();
  static const int kVersionsFieldNumber = 2;
  private:
  void _slow_mutable_versions();
  void _slow_set_allocated_versions(
      ::google::protobuf::Arena* message_arena, ::tensorflow::VersionDef** versions);
  ::tensorflow::VersionDef* _slow_release_versions();
  public:
  const ::tensorflow::VersionDef& versions() const;
  ::tensorflow::VersionDef* mutable_versions();
  ::tensorflow::VersionDef* release_versions();
  void set_allocated_versions(::tensorflow::VersionDef* versions);
  ::tensorflow::VersionDef* unsafe_arena_release_versions();
  void unsafe_arena_set_allocated_versions(
      ::tensorflow::VersionDef* versions);

  // @@protoc_insertion_point(class_scope:tensorflow.SavedTensorSliceMeta)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::RepeatedPtrField< ::tensorflow::SavedSliceMeta > tensor_;
  ::tensorflow::VersionDef* versions_;
  mutable int _cached_size_;
  friend struct protobuf_tensorflow_2fcore_2futil_2fsaved_5ftensor_5fslice_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SavedSlice : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:tensorflow.SavedSlice) */ {
 public:
  SavedSlice();
  virtual ~SavedSlice();

  SavedSlice(const SavedSlice& from);

  inline SavedSlice& operator=(const SavedSlice& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SavedSlice(SavedSlice&& from) noexcept
    : SavedSlice() {
    *this = ::std::move(from);
  }

  inline SavedSlice& operator=(SavedSlice&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline ::google::protobuf::Arena* GetArena() const PROTOBUF_FINAL {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const PROTOBUF_FINAL {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const SavedSlice& default_instance();

  static inline const SavedSlice* internal_default_instance() {
    return reinterpret_cast<const SavedSlice*>(
               &_SavedSlice_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    2;

  void UnsafeArenaSwap(SavedSlice* other);
  void Swap(SavedSlice* other);
  friend void swap(SavedSlice& a, SavedSlice& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SavedSlice* New() const PROTOBUF_FINAL { return New(NULL); }

  SavedSlice* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const SavedSlice& from);
  void MergeFrom(const SavedSlice& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(SavedSlice* other);
  protected:
  explicit SavedSlice(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);
  ::std::string* unsafe_arena_release_name();
  void unsafe_arena_set_allocated_name(
      ::std::string* name);

  // .tensorflow.TensorSliceProto slice = 2;
  bool has_slice() const;
  void clear_slice();
  static const int kSliceFieldNumber = 2;
  private:
  void _slow_mutable_slice();
  void _slow_set_allocated_slice(
      ::google::protobuf::Arena* message_arena, ::tensorflow::TensorSliceProto** slice);
  ::tensorflow::TensorSliceProto* _slow_release_slice();
  public:
  const ::tensorflow::TensorSliceProto& slice() const;
  ::tensorflow::TensorSliceProto* mutable_slice();
  ::tensorflow::TensorSliceProto* release_slice();
  void set_allocated_slice(::tensorflow::TensorSliceProto* slice);
  ::tensorflow::TensorSliceProto* unsafe_arena_release_slice();
  void unsafe_arena_set_allocated_slice(
      ::tensorflow::TensorSliceProto* slice);

  // .tensorflow.TensorProto data = 3;
  bool has_data() const;
  void clear_data();
  static const int kDataFieldNumber = 3;
  private:
  void _slow_mutable_data();
  void _slow_set_allocated_data(
      ::google::protobuf::Arena* message_arena, ::tensorflow::TensorProto** data);
  ::tensorflow::TensorProto* _slow_release_data();
  public:
  const ::tensorflow::TensorProto& data() const;
  ::tensorflow::TensorProto* mutable_data();
  ::tensorflow::TensorProto* release_data();
  void set_allocated_data(::tensorflow::TensorProto* data);
  ::tensorflow::TensorProto* unsafe_arena_release_data();
  void unsafe_arena_set_allocated_data(
      ::tensorflow::TensorProto* data);

  // @@protoc_insertion_point(class_scope:tensorflow.SavedSlice)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::tensorflow::TensorSliceProto* slice_;
  ::tensorflow::TensorProto* data_;
  mutable int _cached_size_;
  friend struct protobuf_tensorflow_2fcore_2futil_2fsaved_5ftensor_5fslice_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SavedTensorSlices : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:tensorflow.SavedTensorSlices) */ {
 public:
  SavedTensorSlices();
  virtual ~SavedTensorSlices();

  SavedTensorSlices(const SavedTensorSlices& from);

  inline SavedTensorSlices& operator=(const SavedTensorSlices& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SavedTensorSlices(SavedTensorSlices&& from) noexcept
    : SavedTensorSlices() {
    *this = ::std::move(from);
  }

  inline SavedTensorSlices& operator=(SavedTensorSlices&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline ::google::protobuf::Arena* GetArena() const PROTOBUF_FINAL {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const PROTOBUF_FINAL {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const SavedTensorSlices& default_instance();

  static inline const SavedTensorSlices* internal_default_instance() {
    return reinterpret_cast<const SavedTensorSlices*>(
               &_SavedTensorSlices_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    3;

  void UnsafeArenaSwap(SavedTensorSlices* other);
  void Swap(SavedTensorSlices* other);
  friend void swap(SavedTensorSlices& a, SavedTensorSlices& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SavedTensorSlices* New() const PROTOBUF_FINAL { return New(NULL); }

  SavedTensorSlices* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const SavedTensorSlices& from);
  void MergeFrom(const SavedTensorSlices& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(SavedTensorSlices* other);
  protected:
  explicit SavedTensorSlices(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .tensorflow.SavedTensorSliceMeta meta = 1;
  bool has_meta() const;
  void clear_meta();
  static const int kMetaFieldNumber = 1;
  private:
  void _slow_mutable_meta();
  void _slow_set_allocated_meta(
      ::google::protobuf::Arena* message_arena, ::tensorflow::SavedTensorSliceMeta** meta);
  ::tensorflow::SavedTensorSliceMeta* _slow_release_meta();
  public:
  const ::tensorflow::SavedTensorSliceMeta& meta() const;
  ::tensorflow::SavedTensorSliceMeta* mutable_meta();
  ::tensorflow::SavedTensorSliceMeta* release_meta();
  void set_allocated_meta(::tensorflow::SavedTensorSliceMeta* meta);
  ::tensorflow::SavedTensorSliceMeta* unsafe_arena_release_meta();
  void unsafe_arena_set_allocated_meta(
      ::tensorflow::SavedTensorSliceMeta* meta);

  // .tensorflow.SavedSlice data = 2;
  bool has_data() const;
  void clear_data();
  static const int kDataFieldNumber = 2;
  private:
  void _slow_mutable_data();
  void _slow_set_allocated_data(
      ::google::protobuf::Arena* message_arena, ::tensorflow::SavedSlice** data);
  ::tensorflow::SavedSlice* _slow_release_data();
  public:
  const ::tensorflow::SavedSlice& data() const;
  ::tensorflow::SavedSlice* mutable_data();
  ::tensorflow::SavedSlice* release_data();
  void set_allocated_data(::tensorflow::SavedSlice* data);
  ::tensorflow::SavedSlice* unsafe_arena_release_data();
  void unsafe_arena_set_allocated_data(
      ::tensorflow::SavedSlice* data);

  // @@protoc_insertion_point(class_scope:tensorflow.SavedTensorSlices)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::tensorflow::SavedTensorSliceMeta* meta_;
  ::tensorflow::SavedSlice* data_;
  mutable int _cached_size_;
  friend struct protobuf_tensorflow_2fcore_2futil_2fsaved_5ftensor_5fslice_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// SavedSliceMeta

// string name = 1;
inline void SavedSliceMeta::clear_name() {
  name_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& SavedSliceMeta::name() const {
  // @@protoc_insertion_point(field_get:tensorflow.SavedSliceMeta.name)
  return name_.Get();
}
inline void SavedSliceMeta::set_name(const ::std::string& value) {
  
  name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:tensorflow.SavedSliceMeta.name)
}
#if LANG_CXX11
inline void SavedSliceMeta::set_name(::std::string&& value) {
  
  name_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:tensorflow.SavedSliceMeta.name)
}
#endif
inline void SavedSliceMeta::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:tensorflow.SavedSliceMeta.name)
}
inline void SavedSliceMeta::set_name(const char* value,
    size_t size) {
  
  name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:tensorflow.SavedSliceMeta.name)
}
inline ::std::string* SavedSliceMeta::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:tensorflow.SavedSliceMeta.name)
  return name_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* SavedSliceMeta::release_name() {
  // @@protoc_insertion_point(field_release:tensorflow.SavedSliceMeta.name)
  
  return name_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* SavedSliceMeta::unsafe_arena_release_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:tensorflow.SavedSliceMeta.name)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return name_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void SavedSliceMeta::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:tensorflow.SavedSliceMeta.name)
}
inline void SavedSliceMeta::unsafe_arena_set_allocated_name(
    ::std::string* name) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (name != NULL) {
    
  } else {
    
  }
  name_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      name, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tensorflow.SavedSliceMeta.name)
}

// .tensorflow.TensorShapeProto shape = 2;
inline bool SavedSliceMeta::has_shape() const {
  return this != internal_default_instance() && shape_ != NULL;
}
inline void SavedSliceMeta::clear_shape() {
  if (GetArenaNoVirtual() == NULL && shape_ != NULL) delete shape_;
  shape_ = NULL;
}
inline const ::tensorflow::TensorShapeProto& SavedSliceMeta::shape() const {
  const ::tensorflow::TensorShapeProto* p = shape_;
  // @@protoc_insertion_point(field_get:tensorflow.SavedSliceMeta.shape)
  return p != NULL ? *p : *reinterpret_cast<const ::tensorflow::TensorShapeProto*>(
      &::tensorflow::_TensorShapeProto_default_instance_);
}
inline ::tensorflow::TensorShapeProto* SavedSliceMeta::mutable_shape() {
  
  if (shape_ == NULL) {
    _slow_mutable_shape();
  }
  // @@protoc_insertion_point(field_mutable:tensorflow.SavedSliceMeta.shape)
  return shape_;
}
inline ::tensorflow::TensorShapeProto* SavedSliceMeta::release_shape() {
  // @@protoc_insertion_point(field_release:tensorflow.SavedSliceMeta.shape)
  
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_shape();
  } else {
    ::tensorflow::TensorShapeProto* temp = shape_;
    shape_ = NULL;
    return temp;
  }
}
inline  void SavedSliceMeta::set_allocated_shape(::tensorflow::TensorShapeProto* shape) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete shape_;
  }
  if (shape != NULL) {
    _slow_set_allocated_shape(message_arena, &shape);
  }
  shape_ = shape;
  if (shape) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:tensorflow.SavedSliceMeta.shape)
}

// .tensorflow.DataType type = 3;
inline void SavedSliceMeta::clear_type() {
  type_ = 0;
}
inline ::tensorflow::DataType SavedSliceMeta::type() const {
  // @@protoc_insertion_point(field_get:tensorflow.SavedSliceMeta.type)
  return static_cast< ::tensorflow::DataType >(type_);
}
inline void SavedSliceMeta::set_type(::tensorflow::DataType value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.SavedSliceMeta.type)
}

// repeated .tensorflow.TensorSliceProto slice = 4;
inline int SavedSliceMeta::slice_size() const {
  return slice_.size();
}
inline void SavedSliceMeta::clear_slice() {
  slice_.Clear();
}
inline const ::tensorflow::TensorSliceProto& SavedSliceMeta::slice(int index) const {
  // @@protoc_insertion_point(field_get:tensorflow.SavedSliceMeta.slice)
  return slice_.Get(index);
}
inline ::tensorflow::TensorSliceProto* SavedSliceMeta::mutable_slice(int index) {
  // @@protoc_insertion_point(field_mutable:tensorflow.SavedSliceMeta.slice)
  return slice_.Mutable(index);
}
inline ::tensorflow::TensorSliceProto* SavedSliceMeta::add_slice() {
  // @@protoc_insertion_point(field_add:tensorflow.SavedSliceMeta.slice)
  return slice_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::tensorflow::TensorSliceProto >*
SavedSliceMeta::mutable_slice() {
  // @@protoc_insertion_point(field_mutable_list:tensorflow.SavedSliceMeta.slice)
  return &slice_;
}
inline const ::google::protobuf::RepeatedPtrField< ::tensorflow::TensorSliceProto >&
SavedSliceMeta::slice() const {
  // @@protoc_insertion_point(field_list:tensorflow.SavedSliceMeta.slice)
  return slice_;
}

// -------------------------------------------------------------------

// SavedTensorSliceMeta

// repeated .tensorflow.SavedSliceMeta tensor = 1;
inline int SavedTensorSliceMeta::tensor_size() const {
  return tensor_.size();
}
inline void SavedTensorSliceMeta::clear_tensor() {
  tensor_.Clear();
}
inline const ::tensorflow::SavedSliceMeta& SavedTensorSliceMeta::tensor(int index) const {
  // @@protoc_insertion_point(field_get:tensorflow.SavedTensorSliceMeta.tensor)
  return tensor_.Get(index);
}
inline ::tensorflow::SavedSliceMeta* SavedTensorSliceMeta::mutable_tensor(int index) {
  // @@protoc_insertion_point(field_mutable:tensorflow.SavedTensorSliceMeta.tensor)
  return tensor_.Mutable(index);
}
inline ::tensorflow::SavedSliceMeta* SavedTensorSliceMeta::add_tensor() {
  // @@protoc_insertion_point(field_add:tensorflow.SavedTensorSliceMeta.tensor)
  return tensor_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::tensorflow::SavedSliceMeta >*
SavedTensorSliceMeta::mutable_tensor() {
  // @@protoc_insertion_point(field_mutable_list:tensorflow.SavedTensorSliceMeta.tensor)
  return &tensor_;
}
inline const ::google::protobuf::RepeatedPtrField< ::tensorflow::SavedSliceMeta >&
SavedTensorSliceMeta::tensor() const {
  // @@protoc_insertion_point(field_list:tensorflow.SavedTensorSliceMeta.tensor)
  return tensor_;
}

// .tensorflow.VersionDef versions = 2;
inline bool SavedTensorSliceMeta::has_versions() const {
  return this != internal_default_instance() && versions_ != NULL;
}
inline void SavedTensorSliceMeta::clear_versions() {
  if (GetArenaNoVirtual() == NULL && versions_ != NULL) delete versions_;
  versions_ = NULL;
}
inline const ::tensorflow::VersionDef& SavedTensorSliceMeta::versions() const {
  const ::tensorflow::VersionDef* p = versions_;
  // @@protoc_insertion_point(field_get:tensorflow.SavedTensorSliceMeta.versions)
  return p != NULL ? *p : *reinterpret_cast<const ::tensorflow::VersionDef*>(
      &::tensorflow::_VersionDef_default_instance_);
}
inline ::tensorflow::VersionDef* SavedTensorSliceMeta::mutable_versions() {
  
  if (versions_ == NULL) {
    _slow_mutable_versions();
  }
  // @@protoc_insertion_point(field_mutable:tensorflow.SavedTensorSliceMeta.versions)
  return versions_;
}
inline ::tensorflow::VersionDef* SavedTensorSliceMeta::release_versions() {
  // @@protoc_insertion_point(field_release:tensorflow.SavedTensorSliceMeta.versions)
  
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_versions();
  } else {
    ::tensorflow::VersionDef* temp = versions_;
    versions_ = NULL;
    return temp;
  }
}
inline  void SavedTensorSliceMeta::set_allocated_versions(::tensorflow::VersionDef* versions) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete versions_;
  }
  if (versions != NULL) {
    _slow_set_allocated_versions(message_arena, &versions);
  }
  versions_ = versions;
  if (versions) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:tensorflow.SavedTensorSliceMeta.versions)
}

// -------------------------------------------------------------------

// SavedSlice

// string name = 1;
inline void SavedSlice::clear_name() {
  name_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& SavedSlice::name() const {
  // @@protoc_insertion_point(field_get:tensorflow.SavedSlice.name)
  return name_.Get();
}
inline void SavedSlice::set_name(const ::std::string& value) {
  
  name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:tensorflow.SavedSlice.name)
}
#if LANG_CXX11
inline void SavedSlice::set_name(::std::string&& value) {
  
  name_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:tensorflow.SavedSlice.name)
}
#endif
inline void SavedSlice::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:tensorflow.SavedSlice.name)
}
inline void SavedSlice::set_name(const char* value,
    size_t size) {
  
  name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:tensorflow.SavedSlice.name)
}
inline ::std::string* SavedSlice::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:tensorflow.SavedSlice.name)
  return name_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* SavedSlice::release_name() {
  // @@protoc_insertion_point(field_release:tensorflow.SavedSlice.name)
  
  return name_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* SavedSlice::unsafe_arena_release_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:tensorflow.SavedSlice.name)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return name_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void SavedSlice::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:tensorflow.SavedSlice.name)
}
inline void SavedSlice::unsafe_arena_set_allocated_name(
    ::std::string* name) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (name != NULL) {
    
  } else {
    
  }
  name_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      name, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tensorflow.SavedSlice.name)
}

// .tensorflow.TensorSliceProto slice = 2;
inline bool SavedSlice::has_slice() const {
  return this != internal_default_instance() && slice_ != NULL;
}
inline void SavedSlice::clear_slice() {
  if (GetArenaNoVirtual() == NULL && slice_ != NULL) delete slice_;
  slice_ = NULL;
}
inline const ::tensorflow::TensorSliceProto& SavedSlice::slice() const {
  const ::tensorflow::TensorSliceProto* p = slice_;
  // @@protoc_insertion_point(field_get:tensorflow.SavedSlice.slice)
  return p != NULL ? *p : *reinterpret_cast<const ::tensorflow::TensorSliceProto*>(
      &::tensorflow::_TensorSliceProto_default_instance_);
}
inline ::tensorflow::TensorSliceProto* SavedSlice::mutable_slice() {
  
  if (slice_ == NULL) {
    _slow_mutable_slice();
  }
  // @@protoc_insertion_point(field_mutable:tensorflow.SavedSlice.slice)
  return slice_;
}
inline ::tensorflow::TensorSliceProto* SavedSlice::release_slice() {
  // @@protoc_insertion_point(field_release:tensorflow.SavedSlice.slice)
  
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_slice();
  } else {
    ::tensorflow::TensorSliceProto* temp = slice_;
    slice_ = NULL;
    return temp;
  }
}
inline  void SavedSlice::set_allocated_slice(::tensorflow::TensorSliceProto* slice) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete slice_;
  }
  if (slice != NULL) {
    _slow_set_allocated_slice(message_arena, &slice);
  }
  slice_ = slice;
  if (slice) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:tensorflow.SavedSlice.slice)
}

// .tensorflow.TensorProto data = 3;
inline bool SavedSlice::has_data() const {
  return this != internal_default_instance() && data_ != NULL;
}
inline void SavedSlice::clear_data() {
  if (GetArenaNoVirtual() == NULL && data_ != NULL) delete data_;
  data_ = NULL;
}
inline const ::tensorflow::TensorProto& SavedSlice::data() const {
  const ::tensorflow::TensorProto* p = data_;
  // @@protoc_insertion_point(field_get:tensorflow.SavedSlice.data)
  return p != NULL ? *p : *reinterpret_cast<const ::tensorflow::TensorProto*>(
      &::tensorflow::_TensorProto_default_instance_);
}
inline ::tensorflow::TensorProto* SavedSlice::mutable_data() {
  
  if (data_ == NULL) {
    _slow_mutable_data();
  }
  // @@protoc_insertion_point(field_mutable:tensorflow.SavedSlice.data)
  return data_;
}
inline ::tensorflow::TensorProto* SavedSlice::release_data() {
  // @@protoc_insertion_point(field_release:tensorflow.SavedSlice.data)
  
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_data();
  } else {
    ::tensorflow::TensorProto* temp = data_;
    data_ = NULL;
    return temp;
  }
}
inline  void SavedSlice::set_allocated_data(::tensorflow::TensorProto* data) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete data_;
  }
  if (data != NULL) {
    _slow_set_allocated_data(message_arena, &data);
  }
  data_ = data;
  if (data) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:tensorflow.SavedSlice.data)
}

// -------------------------------------------------------------------

// SavedTensorSlices

// .tensorflow.SavedTensorSliceMeta meta = 1;
inline bool SavedTensorSlices::has_meta() const {
  return this != internal_default_instance() && meta_ != NULL;
}
inline void SavedTensorSlices::clear_meta() {
  if (GetArenaNoVirtual() == NULL && meta_ != NULL) delete meta_;
  meta_ = NULL;
}
inline const ::tensorflow::SavedTensorSliceMeta& SavedTensorSlices::meta() const {
  const ::tensorflow::SavedTensorSliceMeta* p = meta_;
  // @@protoc_insertion_point(field_get:tensorflow.SavedTensorSlices.meta)
  return p != NULL ? *p : *reinterpret_cast<const ::tensorflow::SavedTensorSliceMeta*>(
      &::tensorflow::_SavedTensorSliceMeta_default_instance_);
}
inline ::tensorflow::SavedTensorSliceMeta* SavedTensorSlices::mutable_meta() {
  
  if (meta_ == NULL) {
    _slow_mutable_meta();
  }
  // @@protoc_insertion_point(field_mutable:tensorflow.SavedTensorSlices.meta)
  return meta_;
}
inline ::tensorflow::SavedTensorSliceMeta* SavedTensorSlices::release_meta() {
  // @@protoc_insertion_point(field_release:tensorflow.SavedTensorSlices.meta)
  
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_meta();
  } else {
    ::tensorflow::SavedTensorSliceMeta* temp = meta_;
    meta_ = NULL;
    return temp;
  }
}
inline  void SavedTensorSlices::set_allocated_meta(::tensorflow::SavedTensorSliceMeta* meta) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete meta_;
  }
  if (meta != NULL) {
    _slow_set_allocated_meta(message_arena, &meta);
  }
  meta_ = meta;
  if (meta) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:tensorflow.SavedTensorSlices.meta)
}

// .tensorflow.SavedSlice data = 2;
inline bool SavedTensorSlices::has_data() const {
  return this != internal_default_instance() && data_ != NULL;
}
inline void SavedTensorSlices::clear_data() {
  if (GetArenaNoVirtual() == NULL && data_ != NULL) delete data_;
  data_ = NULL;
}
inline const ::tensorflow::SavedSlice& SavedTensorSlices::data() const {
  const ::tensorflow::SavedSlice* p = data_;
  // @@protoc_insertion_point(field_get:tensorflow.SavedTensorSlices.data)
  return p != NULL ? *p : *reinterpret_cast<const ::tensorflow::SavedSlice*>(
      &::tensorflow::_SavedSlice_default_instance_);
}
inline ::tensorflow::SavedSlice* SavedTensorSlices::mutable_data() {
  
  if (data_ == NULL) {
    _slow_mutable_data();
  }
  // @@protoc_insertion_point(field_mutable:tensorflow.SavedTensorSlices.data)
  return data_;
}
inline ::tensorflow::SavedSlice* SavedTensorSlices::release_data() {
  // @@protoc_insertion_point(field_release:tensorflow.SavedTensorSlices.data)
  
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_data();
  } else {
    ::tensorflow::SavedSlice* temp = data_;
    data_ = NULL;
    return temp;
  }
}
inline  void SavedTensorSlices::set_allocated_data(::tensorflow::SavedSlice* data) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete data_;
  }
  if (data != NULL) {
    _slow_set_allocated_data(message_arena, &data);
  }
  data_ = data;
  if (data) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:tensorflow.SavedTensorSlices.data)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


}  // namespace tensorflow

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_tensorflow_2fcore_2futil_2fsaved_5ftensor_5fslice_2eproto__INCLUDED
