// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: tensorflow/core/framework/log_memory.proto

#ifndef PROTOBUF_tensorflow_2fcore_2fframework_2flog_5fmemory_2eproto_INCLUDED
#define PROTOBUF_tensorflow_2fcore_2fframework_2flog_5fmemory_2eproto_INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "tensorflow/core/framework/tensor_description.pb.h"
// @@protoc_insertion_point(includes)

namespace protobuf_tensorflow_2fcore_2fframework_2flog_5fmemory_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[6];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
void InitDefaultsMemoryLogStepImpl();
void InitDefaultsMemoryLogStep();
void InitDefaultsMemoryLogTensorAllocationImpl();
void InitDefaultsMemoryLogTensorAllocation();
void InitDefaultsMemoryLogTensorDeallocationImpl();
void InitDefaultsMemoryLogTensorDeallocation();
void InitDefaultsMemoryLogTensorOutputImpl();
void InitDefaultsMemoryLogTensorOutput();
void InitDefaultsMemoryLogRawAllocationImpl();
void InitDefaultsMemoryLogRawAllocation();
void InitDefaultsMemoryLogRawDeallocationImpl();
void InitDefaultsMemoryLogRawDeallocation();
inline void InitDefaults() {
  InitDefaultsMemoryLogStep();
  InitDefaultsMemoryLogTensorAllocation();
  InitDefaultsMemoryLogTensorDeallocation();
  InitDefaultsMemoryLogTensorOutput();
  InitDefaultsMemoryLogRawAllocation();
  InitDefaultsMemoryLogRawDeallocation();
}
}  // namespace protobuf_tensorflow_2fcore_2fframework_2flog_5fmemory_2eproto
namespace tensorflow {
class MemoryLogRawAllocation;
class MemoryLogRawAllocationDefaultTypeInternal;
extern MemoryLogRawAllocationDefaultTypeInternal _MemoryLogRawAllocation_default_instance_;
class MemoryLogRawDeallocation;
class MemoryLogRawDeallocationDefaultTypeInternal;
extern MemoryLogRawDeallocationDefaultTypeInternal _MemoryLogRawDeallocation_default_instance_;
class MemoryLogStep;
class MemoryLogStepDefaultTypeInternal;
extern MemoryLogStepDefaultTypeInternal _MemoryLogStep_default_instance_;
class MemoryLogTensorAllocation;
class MemoryLogTensorAllocationDefaultTypeInternal;
extern MemoryLogTensorAllocationDefaultTypeInternal _MemoryLogTensorAllocation_default_instance_;
class MemoryLogTensorDeallocation;
class MemoryLogTensorDeallocationDefaultTypeInternal;
extern MemoryLogTensorDeallocationDefaultTypeInternal _MemoryLogTensorDeallocation_default_instance_;
class MemoryLogTensorOutput;
class MemoryLogTensorOutputDefaultTypeInternal;
extern MemoryLogTensorOutputDefaultTypeInternal _MemoryLogTensorOutput_default_instance_;
}  // namespace tensorflow
namespace google {
namespace protobuf {
template<> ::tensorflow::MemoryLogRawAllocation* Arena::CreateMessage< ::tensorflow::MemoryLogRawAllocation>(Arena*);
template<> ::tensorflow::MemoryLogRawDeallocation* Arena::CreateMessage< ::tensorflow::MemoryLogRawDeallocation>(Arena*);
template<> ::tensorflow::MemoryLogStep* Arena::CreateMessage< ::tensorflow::MemoryLogStep>(Arena*);
template<> ::tensorflow::MemoryLogTensorAllocation* Arena::CreateMessage< ::tensorflow::MemoryLogTensorAllocation>(Arena*);
template<> ::tensorflow::MemoryLogTensorDeallocation* Arena::CreateMessage< ::tensorflow::MemoryLogTensorDeallocation>(Arena*);
template<> ::tensorflow::MemoryLogTensorOutput* Arena::CreateMessage< ::tensorflow::MemoryLogTensorOutput>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace tensorflow {

// ===================================================================

class MemoryLogStep : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:tensorflow.MemoryLogStep) */ {
 public:
  MemoryLogStep();
  virtual ~MemoryLogStep();

  MemoryLogStep(const MemoryLogStep& from);

  inline MemoryLogStep& operator=(const MemoryLogStep& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  MemoryLogStep(MemoryLogStep&& from) noexcept
    : MemoryLogStep() {
    *this = ::std::move(from);
  }

  inline MemoryLogStep& operator=(MemoryLogStep&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline ::google::protobuf::Arena* GetArena() const PROTOBUF_FINAL {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const PROTOBUF_FINAL {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const MemoryLogStep& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MemoryLogStep* internal_default_instance() {
    return reinterpret_cast<const MemoryLogStep*>(
               &_MemoryLogStep_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void UnsafeArenaSwap(MemoryLogStep* other);
  void Swap(MemoryLogStep* other);
  friend void swap(MemoryLogStep& a, MemoryLogStep& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline MemoryLogStep* New() const PROTOBUF_FINAL {
    return ::google::protobuf::Arena::CreateMessage<MemoryLogStep>(NULL);
  }

  MemoryLogStep* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL {
    return ::google::protobuf::Arena::CreateMessage<MemoryLogStep>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const MemoryLogStep& from);
  void MergeFrom(const MemoryLogStep& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(MemoryLogStep* other);
  protected:
  explicit MemoryLogStep(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string handle = 2;
  void clear_handle();
  static const int kHandleFieldNumber = 2;
  const ::std::string& handle() const;
  void set_handle(const ::std::string& value);
  #if LANG_CXX11
  void set_handle(::std::string&& value);
  #endif
  void set_handle(const char* value);
  void set_handle(const char* value, size_t size);
  ::std::string* mutable_handle();
  ::std::string* release_handle();
  void set_allocated_handle(::std::string* handle);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_handle();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_handle(
      ::std::string* handle);

  // int64 step_id = 1;
  void clear_step_id();
  static const int kStepIdFieldNumber = 1;
  ::google::protobuf::int64 step_id() const;
  void set_step_id(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:tensorflow.MemoryLogStep)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::ArenaStringPtr handle_;
  ::google::protobuf::int64 step_id_;
  mutable int _cached_size_;
  friend struct ::protobuf_tensorflow_2fcore_2fframework_2flog_5fmemory_2eproto::TableStruct;
  friend void ::protobuf_tensorflow_2fcore_2fframework_2flog_5fmemory_2eproto::InitDefaultsMemoryLogStepImpl();
};
// -------------------------------------------------------------------

class MemoryLogTensorAllocation : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:tensorflow.MemoryLogTensorAllocation) */ {
 public:
  MemoryLogTensorAllocation();
  virtual ~MemoryLogTensorAllocation();

  MemoryLogTensorAllocation(const MemoryLogTensorAllocation& from);

  inline MemoryLogTensorAllocation& operator=(const MemoryLogTensorAllocation& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  MemoryLogTensorAllocation(MemoryLogTensorAllocation&& from) noexcept
    : MemoryLogTensorAllocation() {
    *this = ::std::move(from);
  }

  inline MemoryLogTensorAllocation& operator=(MemoryLogTensorAllocation&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline ::google::protobuf::Arena* GetArena() const PROTOBUF_FINAL {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const PROTOBUF_FINAL {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const MemoryLogTensorAllocation& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MemoryLogTensorAllocation* internal_default_instance() {
    return reinterpret_cast<const MemoryLogTensorAllocation*>(
               &_MemoryLogTensorAllocation_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void UnsafeArenaSwap(MemoryLogTensorAllocation* other);
  void Swap(MemoryLogTensorAllocation* other);
  friend void swap(MemoryLogTensorAllocation& a, MemoryLogTensorAllocation& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline MemoryLogTensorAllocation* New() const PROTOBUF_FINAL {
    return ::google::protobuf::Arena::CreateMessage<MemoryLogTensorAllocation>(NULL);
  }

  MemoryLogTensorAllocation* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL {
    return ::google::protobuf::Arena::CreateMessage<MemoryLogTensorAllocation>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const MemoryLogTensorAllocation& from);
  void MergeFrom(const MemoryLogTensorAllocation& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(MemoryLogTensorAllocation* other);
  protected:
  explicit MemoryLogTensorAllocation(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string kernel_name = 2;
  void clear_kernel_name();
  static const int kKernelNameFieldNumber = 2;
  const ::std::string& kernel_name() const;
  void set_kernel_name(const ::std::string& value);
  #if LANG_CXX11
  void set_kernel_name(::std::string&& value);
  #endif
  void set_kernel_name(const char* value);
  void set_kernel_name(const char* value, size_t size);
  ::std::string* mutable_kernel_name();
  ::std::string* release_kernel_name();
  void set_allocated_kernel_name(::std::string* kernel_name);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_kernel_name();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_kernel_name(
      ::std::string* kernel_name);

  // .tensorflow.TensorDescription tensor = 3;
  bool has_tensor() const;
  void clear_tensor();
  static const int kTensorFieldNumber = 3;
  const ::tensorflow::TensorDescription& tensor() const;
  ::tensorflow::TensorDescription* release_tensor();
  ::tensorflow::TensorDescription* mutable_tensor();
  void set_allocated_tensor(::tensorflow::TensorDescription* tensor);
  void unsafe_arena_set_allocated_tensor(
      ::tensorflow::TensorDescription* tensor);
  ::tensorflow::TensorDescription* unsafe_arena_release_tensor();

  // int64 step_id = 1;
  void clear_step_id();
  static const int kStepIdFieldNumber = 1;
  ::google::protobuf::int64 step_id() const;
  void set_step_id(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:tensorflow.MemoryLogTensorAllocation)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::ArenaStringPtr kernel_name_;
  ::tensorflow::TensorDescription* tensor_;
  ::google::protobuf::int64 step_id_;
  mutable int _cached_size_;
  friend struct ::protobuf_tensorflow_2fcore_2fframework_2flog_5fmemory_2eproto::TableStruct;
  friend void ::protobuf_tensorflow_2fcore_2fframework_2flog_5fmemory_2eproto::InitDefaultsMemoryLogTensorAllocationImpl();
};
// -------------------------------------------------------------------

class MemoryLogTensorDeallocation : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:tensorflow.MemoryLogTensorDeallocation) */ {
 public:
  MemoryLogTensorDeallocation();
  virtual ~MemoryLogTensorDeallocation();

  MemoryLogTensorDeallocation(const MemoryLogTensorDeallocation& from);

  inline MemoryLogTensorDeallocation& operator=(const MemoryLogTensorDeallocation& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  MemoryLogTensorDeallocation(MemoryLogTensorDeallocation&& from) noexcept
    : MemoryLogTensorDeallocation() {
    *this = ::std::move(from);
  }

  inline MemoryLogTensorDeallocation& operator=(MemoryLogTensorDeallocation&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline ::google::protobuf::Arena* GetArena() const PROTOBUF_FINAL {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const PROTOBUF_FINAL {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const MemoryLogTensorDeallocation& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MemoryLogTensorDeallocation* internal_default_instance() {
    return reinterpret_cast<const MemoryLogTensorDeallocation*>(
               &_MemoryLogTensorDeallocation_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    2;

  void UnsafeArenaSwap(MemoryLogTensorDeallocation* other);
  void Swap(MemoryLogTensorDeallocation* other);
  friend void swap(MemoryLogTensorDeallocation& a, MemoryLogTensorDeallocation& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline MemoryLogTensorDeallocation* New() const PROTOBUF_FINAL {
    return ::google::protobuf::Arena::CreateMessage<MemoryLogTensorDeallocation>(NULL);
  }

  MemoryLogTensorDeallocation* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL {
    return ::google::protobuf::Arena::CreateMessage<MemoryLogTensorDeallocation>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const MemoryLogTensorDeallocation& from);
  void MergeFrom(const MemoryLogTensorDeallocation& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(MemoryLogTensorDeallocation* other);
  protected:
  explicit MemoryLogTensorDeallocation(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string allocator_name = 2;
  void clear_allocator_name();
  static const int kAllocatorNameFieldNumber = 2;
  const ::std::string& allocator_name() const;
  void set_allocator_name(const ::std::string& value);
  #if LANG_CXX11
  void set_allocator_name(::std::string&& value);
  #endif
  void set_allocator_name(const char* value);
  void set_allocator_name(const char* value, size_t size);
  ::std::string* mutable_allocator_name();
  ::std::string* release_allocator_name();
  void set_allocated_allocator_name(::std::string* allocator_name);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_allocator_name();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_allocator_name(
      ::std::string* allocator_name);

  // int64 allocation_id = 1;
  void clear_allocation_id();
  static const int kAllocationIdFieldNumber = 1;
  ::google::protobuf::int64 allocation_id() const;
  void set_allocation_id(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:tensorflow.MemoryLogTensorDeallocation)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::ArenaStringPtr allocator_name_;
  ::google::protobuf::int64 allocation_id_;
  mutable int _cached_size_;
  friend struct ::protobuf_tensorflow_2fcore_2fframework_2flog_5fmemory_2eproto::TableStruct;
  friend void ::protobuf_tensorflow_2fcore_2fframework_2flog_5fmemory_2eproto::InitDefaultsMemoryLogTensorDeallocationImpl();
};
// -------------------------------------------------------------------

class MemoryLogTensorOutput : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:tensorflow.MemoryLogTensorOutput) */ {
 public:
  MemoryLogTensorOutput();
  virtual ~MemoryLogTensorOutput();

  MemoryLogTensorOutput(const MemoryLogTensorOutput& from);

  inline MemoryLogTensorOutput& operator=(const MemoryLogTensorOutput& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  MemoryLogTensorOutput(MemoryLogTensorOutput&& from) noexcept
    : MemoryLogTensorOutput() {
    *this = ::std::move(from);
  }

  inline MemoryLogTensorOutput& operator=(MemoryLogTensorOutput&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline ::google::protobuf::Arena* GetArena() const PROTOBUF_FINAL {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const PROTOBUF_FINAL {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const MemoryLogTensorOutput& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MemoryLogTensorOutput* internal_default_instance() {
    return reinterpret_cast<const MemoryLogTensorOutput*>(
               &_MemoryLogTensorOutput_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    3;

  void UnsafeArenaSwap(MemoryLogTensorOutput* other);
  void Swap(MemoryLogTensorOutput* other);
  friend void swap(MemoryLogTensorOutput& a, MemoryLogTensorOutput& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline MemoryLogTensorOutput* New() const PROTOBUF_FINAL {
    return ::google::protobuf::Arena::CreateMessage<MemoryLogTensorOutput>(NULL);
  }

  MemoryLogTensorOutput* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL {
    return ::google::protobuf::Arena::CreateMessage<MemoryLogTensorOutput>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const MemoryLogTensorOutput& from);
  void MergeFrom(const MemoryLogTensorOutput& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(MemoryLogTensorOutput* other);
  protected:
  explicit MemoryLogTensorOutput(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string kernel_name = 2;
  void clear_kernel_name();
  static const int kKernelNameFieldNumber = 2;
  const ::std::string& kernel_name() const;
  void set_kernel_name(const ::std::string& value);
  #if LANG_CXX11
  void set_kernel_name(::std::string&& value);
  #endif
  void set_kernel_name(const char* value);
  void set_kernel_name(const char* value, size_t size);
  ::std::string* mutable_kernel_name();
  ::std::string* release_kernel_name();
  void set_allocated_kernel_name(::std::string* kernel_name);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_kernel_name();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_kernel_name(
      ::std::string* kernel_name);

  // .tensorflow.TensorDescription tensor = 4;
  bool has_tensor() const;
  void clear_tensor();
  static const int kTensorFieldNumber = 4;
  const ::tensorflow::TensorDescription& tensor() const;
  ::tensorflow::TensorDescription* release_tensor();
  ::tensorflow::TensorDescription* mutable_tensor();
  void set_allocated_tensor(::tensorflow::TensorDescription* tensor);
  void unsafe_arena_set_allocated_tensor(
      ::tensorflow::TensorDescription* tensor);
  ::tensorflow::TensorDescription* unsafe_arena_release_tensor();

  // int64 step_id = 1;
  void clear_step_id();
  static const int kStepIdFieldNumber = 1;
  ::google::protobuf::int64 step_id() const;
  void set_step_id(::google::protobuf::int64 value);

  // int32 index = 3;
  void clear_index();
  static const int kIndexFieldNumber = 3;
  ::google::protobuf::int32 index() const;
  void set_index(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:tensorflow.MemoryLogTensorOutput)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::ArenaStringPtr kernel_name_;
  ::tensorflow::TensorDescription* tensor_;
  ::google::protobuf::int64 step_id_;
  ::google::protobuf::int32 index_;
  mutable int _cached_size_;
  friend struct ::protobuf_tensorflow_2fcore_2fframework_2flog_5fmemory_2eproto::TableStruct;
  friend void ::protobuf_tensorflow_2fcore_2fframework_2flog_5fmemory_2eproto::InitDefaultsMemoryLogTensorOutputImpl();
};
// -------------------------------------------------------------------

class MemoryLogRawAllocation : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:tensorflow.MemoryLogRawAllocation) */ {
 public:
  MemoryLogRawAllocation();
  virtual ~MemoryLogRawAllocation();

  MemoryLogRawAllocation(const MemoryLogRawAllocation& from);

  inline MemoryLogRawAllocation& operator=(const MemoryLogRawAllocation& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  MemoryLogRawAllocation(MemoryLogRawAllocation&& from) noexcept
    : MemoryLogRawAllocation() {
    *this = ::std::move(from);
  }

  inline MemoryLogRawAllocation& operator=(MemoryLogRawAllocation&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline ::google::protobuf::Arena* GetArena() const PROTOBUF_FINAL {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const PROTOBUF_FINAL {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const MemoryLogRawAllocation& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MemoryLogRawAllocation* internal_default_instance() {
    return reinterpret_cast<const MemoryLogRawAllocation*>(
               &_MemoryLogRawAllocation_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    4;

  void UnsafeArenaSwap(MemoryLogRawAllocation* other);
  void Swap(MemoryLogRawAllocation* other);
  friend void swap(MemoryLogRawAllocation& a, MemoryLogRawAllocation& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline MemoryLogRawAllocation* New() const PROTOBUF_FINAL {
    return ::google::protobuf::Arena::CreateMessage<MemoryLogRawAllocation>(NULL);
  }

  MemoryLogRawAllocation* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL {
    return ::google::protobuf::Arena::CreateMessage<MemoryLogRawAllocation>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const MemoryLogRawAllocation& from);
  void MergeFrom(const MemoryLogRawAllocation& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(MemoryLogRawAllocation* other);
  protected:
  explicit MemoryLogRawAllocation(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string operation = 2;
  void clear_operation();
  static const int kOperationFieldNumber = 2;
  const ::std::string& operation() const;
  void set_operation(const ::std::string& value);
  #if LANG_CXX11
  void set_operation(::std::string&& value);
  #endif
  void set_operation(const char* value);
  void set_operation(const char* value, size_t size);
  ::std::string* mutable_operation();
  ::std::string* release_operation();
  void set_allocated_operation(::std::string* operation);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_operation();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_operation(
      ::std::string* operation);

  // string allocator_name = 6;
  void clear_allocator_name();
  static const int kAllocatorNameFieldNumber = 6;
  const ::std::string& allocator_name() const;
  void set_allocator_name(const ::std::string& value);
  #if LANG_CXX11
  void set_allocator_name(::std::string&& value);
  #endif
  void set_allocator_name(const char* value);
  void set_allocator_name(const char* value, size_t size);
  ::std::string* mutable_allocator_name();
  ::std::string* release_allocator_name();
  void set_allocated_allocator_name(::std::string* allocator_name);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_allocator_name();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_allocator_name(
      ::std::string* allocator_name);

  // int64 step_id = 1;
  void clear_step_id();
  static const int kStepIdFieldNumber = 1;
  ::google::protobuf::int64 step_id() const;
  void set_step_id(::google::protobuf::int64 value);

  // int64 num_bytes = 3;
  void clear_num_bytes();
  static const int kNumBytesFieldNumber = 3;
  ::google::protobuf::int64 num_bytes() const;
  void set_num_bytes(::google::protobuf::int64 value);

  // uint64 ptr = 4;
  void clear_ptr();
  static const int kPtrFieldNumber = 4;
  ::google::protobuf::uint64 ptr() const;
  void set_ptr(::google::protobuf::uint64 value);

  // int64 allocation_id = 5;
  void clear_allocation_id();
  static const int kAllocationIdFieldNumber = 5;
  ::google::protobuf::int64 allocation_id() const;
  void set_allocation_id(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:tensorflow.MemoryLogRawAllocation)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::ArenaStringPtr operation_;
  ::google::protobuf::internal::ArenaStringPtr allocator_name_;
  ::google::protobuf::int64 step_id_;
  ::google::protobuf::int64 num_bytes_;
  ::google::protobuf::uint64 ptr_;
  ::google::protobuf::int64 allocation_id_;
  mutable int _cached_size_;
  friend struct ::protobuf_tensorflow_2fcore_2fframework_2flog_5fmemory_2eproto::TableStruct;
  friend void ::protobuf_tensorflow_2fcore_2fframework_2flog_5fmemory_2eproto::InitDefaultsMemoryLogRawAllocationImpl();
};
// -------------------------------------------------------------------

class MemoryLogRawDeallocation : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:tensorflow.MemoryLogRawDeallocation) */ {
 public:
  MemoryLogRawDeallocation();
  virtual ~MemoryLogRawDeallocation();

  MemoryLogRawDeallocation(const MemoryLogRawDeallocation& from);

  inline MemoryLogRawDeallocation& operator=(const MemoryLogRawDeallocation& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  MemoryLogRawDeallocation(MemoryLogRawDeallocation&& from) noexcept
    : MemoryLogRawDeallocation() {
    *this = ::std::move(from);
  }

  inline MemoryLogRawDeallocation& operator=(MemoryLogRawDeallocation&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline ::google::protobuf::Arena* GetArena() const PROTOBUF_FINAL {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const PROTOBUF_FINAL {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const MemoryLogRawDeallocation& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MemoryLogRawDeallocation* internal_default_instance() {
    return reinterpret_cast<const MemoryLogRawDeallocation*>(
               &_MemoryLogRawDeallocation_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    5;

  void UnsafeArenaSwap(MemoryLogRawDeallocation* other);
  void Swap(MemoryLogRawDeallocation* other);
  friend void swap(MemoryLogRawDeallocation& a, MemoryLogRawDeallocation& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline MemoryLogRawDeallocation* New() const PROTOBUF_FINAL {
    return ::google::protobuf::Arena::CreateMessage<MemoryLogRawDeallocation>(NULL);
  }

  MemoryLogRawDeallocation* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL {
    return ::google::protobuf::Arena::CreateMessage<MemoryLogRawDeallocation>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const MemoryLogRawDeallocation& from);
  void MergeFrom(const MemoryLogRawDeallocation& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(MemoryLogRawDeallocation* other);
  protected:
  explicit MemoryLogRawDeallocation(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string operation = 2;
  void clear_operation();
  static const int kOperationFieldNumber = 2;
  const ::std::string& operation() const;
  void set_operation(const ::std::string& value);
  #if LANG_CXX11
  void set_operation(::std::string&& value);
  #endif
  void set_operation(const char* value);
  void set_operation(const char* value, size_t size);
  ::std::string* mutable_operation();
  ::std::string* release_operation();
  void set_allocated_operation(::std::string* operation);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_operation();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_operation(
      ::std::string* operation);

  // string allocator_name = 4;
  void clear_allocator_name();
  static const int kAllocatorNameFieldNumber = 4;
  const ::std::string& allocator_name() const;
  void set_allocator_name(const ::std::string& value);
  #if LANG_CXX11
  void set_allocator_name(::std::string&& value);
  #endif
  void set_allocator_name(const char* value);
  void set_allocator_name(const char* value, size_t size);
  ::std::string* mutable_allocator_name();
  ::std::string* release_allocator_name();
  void set_allocated_allocator_name(::std::string* allocator_name);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_allocator_name();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_allocator_name(
      ::std::string* allocator_name);

  // int64 step_id = 1;
  void clear_step_id();
  static const int kStepIdFieldNumber = 1;
  ::google::protobuf::int64 step_id() const;
  void set_step_id(::google::protobuf::int64 value);

  // int64 allocation_id = 3;
  void clear_allocation_id();
  static const int kAllocationIdFieldNumber = 3;
  ::google::protobuf::int64 allocation_id() const;
  void set_allocation_id(::google::protobuf::int64 value);

  // bool deferred = 5;
  void clear_deferred();
  static const int kDeferredFieldNumber = 5;
  bool deferred() const;
  void set_deferred(bool value);

  // @@protoc_insertion_point(class_scope:tensorflow.MemoryLogRawDeallocation)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::ArenaStringPtr operation_;
  ::google::protobuf::internal::ArenaStringPtr allocator_name_;
  ::google::protobuf::int64 step_id_;
  ::google::protobuf::int64 allocation_id_;
  bool deferred_;
  mutable int _cached_size_;
  friend struct ::protobuf_tensorflow_2fcore_2fframework_2flog_5fmemory_2eproto::TableStruct;
  friend void ::protobuf_tensorflow_2fcore_2fframework_2flog_5fmemory_2eproto::InitDefaultsMemoryLogRawDeallocationImpl();
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// MemoryLogStep

// int64 step_id = 1;
inline void MemoryLogStep::clear_step_id() {
  step_id_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 MemoryLogStep::step_id() const {
  // @@protoc_insertion_point(field_get:tensorflow.MemoryLogStep.step_id)
  return step_id_;
}
inline void MemoryLogStep::set_step_id(::google::protobuf::int64 value) {
  
  step_id_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.MemoryLogStep.step_id)
}

// string handle = 2;
inline void MemoryLogStep::clear_handle() {
  handle_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& MemoryLogStep::handle() const {
  // @@protoc_insertion_point(field_get:tensorflow.MemoryLogStep.handle)
  return handle_.Get();
}
inline void MemoryLogStep::set_handle(const ::std::string& value) {
  
  handle_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:tensorflow.MemoryLogStep.handle)
}
#if LANG_CXX11
inline void MemoryLogStep::set_handle(::std::string&& value) {
  
  handle_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:tensorflow.MemoryLogStep.handle)
}
#endif
inline void MemoryLogStep::set_handle(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  handle_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:tensorflow.MemoryLogStep.handle)
}
inline void MemoryLogStep::set_handle(const char* value,
    size_t size) {
  
  handle_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:tensorflow.MemoryLogStep.handle)
}
inline ::std::string* MemoryLogStep::mutable_handle() {
  
  // @@protoc_insertion_point(field_mutable:tensorflow.MemoryLogStep.handle)
  return handle_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* MemoryLogStep::release_handle() {
  // @@protoc_insertion_point(field_release:tensorflow.MemoryLogStep.handle)
  
  return handle_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void MemoryLogStep::set_allocated_handle(::std::string* handle) {
  if (handle != NULL) {
    
  } else {
    
  }
  handle_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), handle,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:tensorflow.MemoryLogStep.handle)
}
inline ::std::string* MemoryLogStep::unsafe_arena_release_handle() {
  // @@protoc_insertion_point(field_unsafe_arena_release:tensorflow.MemoryLogStep.handle)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return handle_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void MemoryLogStep::unsafe_arena_set_allocated_handle(
    ::std::string* handle) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (handle != NULL) {
    
  } else {
    
  }
  handle_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      handle, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tensorflow.MemoryLogStep.handle)
}

// -------------------------------------------------------------------

// MemoryLogTensorAllocation

// int64 step_id = 1;
inline void MemoryLogTensorAllocation::clear_step_id() {
  step_id_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 MemoryLogTensorAllocation::step_id() const {
  // @@protoc_insertion_point(field_get:tensorflow.MemoryLogTensorAllocation.step_id)
  return step_id_;
}
inline void MemoryLogTensorAllocation::set_step_id(::google::protobuf::int64 value) {
  
  step_id_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.MemoryLogTensorAllocation.step_id)
}

// string kernel_name = 2;
inline void MemoryLogTensorAllocation::clear_kernel_name() {
  kernel_name_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& MemoryLogTensorAllocation::kernel_name() const {
  // @@protoc_insertion_point(field_get:tensorflow.MemoryLogTensorAllocation.kernel_name)
  return kernel_name_.Get();
}
inline void MemoryLogTensorAllocation::set_kernel_name(const ::std::string& value) {
  
  kernel_name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:tensorflow.MemoryLogTensorAllocation.kernel_name)
}
#if LANG_CXX11
inline void MemoryLogTensorAllocation::set_kernel_name(::std::string&& value) {
  
  kernel_name_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:tensorflow.MemoryLogTensorAllocation.kernel_name)
}
#endif
inline void MemoryLogTensorAllocation::set_kernel_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  kernel_name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:tensorflow.MemoryLogTensorAllocation.kernel_name)
}
inline void MemoryLogTensorAllocation::set_kernel_name(const char* value,
    size_t size) {
  
  kernel_name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:tensorflow.MemoryLogTensorAllocation.kernel_name)
}
inline ::std::string* MemoryLogTensorAllocation::mutable_kernel_name() {
  
  // @@protoc_insertion_point(field_mutable:tensorflow.MemoryLogTensorAllocation.kernel_name)
  return kernel_name_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* MemoryLogTensorAllocation::release_kernel_name() {
  // @@protoc_insertion_point(field_release:tensorflow.MemoryLogTensorAllocation.kernel_name)
  
  return kernel_name_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void MemoryLogTensorAllocation::set_allocated_kernel_name(::std::string* kernel_name) {
  if (kernel_name != NULL) {
    
  } else {
    
  }
  kernel_name_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), kernel_name,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:tensorflow.MemoryLogTensorAllocation.kernel_name)
}
inline ::std::string* MemoryLogTensorAllocation::unsafe_arena_release_kernel_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:tensorflow.MemoryLogTensorAllocation.kernel_name)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return kernel_name_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void MemoryLogTensorAllocation::unsafe_arena_set_allocated_kernel_name(
    ::std::string* kernel_name) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (kernel_name != NULL) {
    
  } else {
    
  }
  kernel_name_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      kernel_name, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tensorflow.MemoryLogTensorAllocation.kernel_name)
}

// .tensorflow.TensorDescription tensor = 3;
inline bool MemoryLogTensorAllocation::has_tensor() const {
  return this != internal_default_instance() && tensor_ != NULL;
}
inline const ::tensorflow::TensorDescription& MemoryLogTensorAllocation::tensor() const {
  const ::tensorflow::TensorDescription* p = tensor_;
  // @@protoc_insertion_point(field_get:tensorflow.MemoryLogTensorAllocation.tensor)
  return p != NULL ? *p : *reinterpret_cast<const ::tensorflow::TensorDescription*>(
      &::tensorflow::_TensorDescription_default_instance_);
}
inline ::tensorflow::TensorDescription* MemoryLogTensorAllocation::release_tensor() {
  // @@protoc_insertion_point(field_release:tensorflow.MemoryLogTensorAllocation.tensor)
  
  ::tensorflow::TensorDescription* temp = tensor_;
  if (GetArenaNoVirtual() != NULL) {
    temp = ::google::protobuf::internal::DuplicateIfNonNull(temp, NULL);
  }
  tensor_ = NULL;
  return temp;
}
inline ::tensorflow::TensorDescription* MemoryLogTensorAllocation::unsafe_arena_release_tensor() {
  // @@protoc_insertion_point(field_unsafe_arena_release:tensorflow.MemoryLogTensorAllocation.tensor)
  
  ::tensorflow::TensorDescription* temp = tensor_;
  tensor_ = NULL;
  return temp;
}
inline ::tensorflow::TensorDescription* MemoryLogTensorAllocation::mutable_tensor() {
  
  if (tensor_ == NULL) {
    tensor_ = ::google::protobuf::Arena::CreateMessage< ::tensorflow::TensorDescription >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:tensorflow.MemoryLogTensorAllocation.tensor)
  return tensor_;
}
inline void MemoryLogTensorAllocation::set_allocated_tensor(::tensorflow::TensorDescription* tensor) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(tensor_);
  }
  if (tensor) {
    ::google::protobuf::Arena* submessage_arena =
      reinterpret_cast< ::google::protobuf::MessageLite*>(tensor)->GetArena();
    if (message_arena != submessage_arena) {
      tensor = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, tensor, submessage_arena);
    }
    
  } else {
    
  }
  tensor_ = tensor;
  // @@protoc_insertion_point(field_set_allocated:tensorflow.MemoryLogTensorAllocation.tensor)
}

// -------------------------------------------------------------------

// MemoryLogTensorDeallocation

// int64 allocation_id = 1;
inline void MemoryLogTensorDeallocation::clear_allocation_id() {
  allocation_id_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 MemoryLogTensorDeallocation::allocation_id() const {
  // @@protoc_insertion_point(field_get:tensorflow.MemoryLogTensorDeallocation.allocation_id)
  return allocation_id_;
}
inline void MemoryLogTensorDeallocation::set_allocation_id(::google::protobuf::int64 value) {
  
  allocation_id_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.MemoryLogTensorDeallocation.allocation_id)
}

// string allocator_name = 2;
inline void MemoryLogTensorDeallocation::clear_allocator_name() {
  allocator_name_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& MemoryLogTensorDeallocation::allocator_name() const {
  // @@protoc_insertion_point(field_get:tensorflow.MemoryLogTensorDeallocation.allocator_name)
  return allocator_name_.Get();
}
inline void MemoryLogTensorDeallocation::set_allocator_name(const ::std::string& value) {
  
  allocator_name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:tensorflow.MemoryLogTensorDeallocation.allocator_name)
}
#if LANG_CXX11
inline void MemoryLogTensorDeallocation::set_allocator_name(::std::string&& value) {
  
  allocator_name_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:tensorflow.MemoryLogTensorDeallocation.allocator_name)
}
#endif
inline void MemoryLogTensorDeallocation::set_allocator_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  allocator_name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:tensorflow.MemoryLogTensorDeallocation.allocator_name)
}
inline void MemoryLogTensorDeallocation::set_allocator_name(const char* value,
    size_t size) {
  
  allocator_name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:tensorflow.MemoryLogTensorDeallocation.allocator_name)
}
inline ::std::string* MemoryLogTensorDeallocation::mutable_allocator_name() {
  
  // @@protoc_insertion_point(field_mutable:tensorflow.MemoryLogTensorDeallocation.allocator_name)
  return allocator_name_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* MemoryLogTensorDeallocation::release_allocator_name() {
  // @@protoc_insertion_point(field_release:tensorflow.MemoryLogTensorDeallocation.allocator_name)
  
  return allocator_name_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void MemoryLogTensorDeallocation::set_allocated_allocator_name(::std::string* allocator_name) {
  if (allocator_name != NULL) {
    
  } else {
    
  }
  allocator_name_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), allocator_name,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:tensorflow.MemoryLogTensorDeallocation.allocator_name)
}
inline ::std::string* MemoryLogTensorDeallocation::unsafe_arena_release_allocator_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:tensorflow.MemoryLogTensorDeallocation.allocator_name)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return allocator_name_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void MemoryLogTensorDeallocation::unsafe_arena_set_allocated_allocator_name(
    ::std::string* allocator_name) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (allocator_name != NULL) {
    
  } else {
    
  }
  allocator_name_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      allocator_name, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tensorflow.MemoryLogTensorDeallocation.allocator_name)
}

// -------------------------------------------------------------------

// MemoryLogTensorOutput

// int64 step_id = 1;
inline void MemoryLogTensorOutput::clear_step_id() {
  step_id_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 MemoryLogTensorOutput::step_id() const {
  // @@protoc_insertion_point(field_get:tensorflow.MemoryLogTensorOutput.step_id)
  return step_id_;
}
inline void MemoryLogTensorOutput::set_step_id(::google::protobuf::int64 value) {
  
  step_id_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.MemoryLogTensorOutput.step_id)
}

// string kernel_name = 2;
inline void MemoryLogTensorOutput::clear_kernel_name() {
  kernel_name_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& MemoryLogTensorOutput::kernel_name() const {
  // @@protoc_insertion_point(field_get:tensorflow.MemoryLogTensorOutput.kernel_name)
  return kernel_name_.Get();
}
inline void MemoryLogTensorOutput::set_kernel_name(const ::std::string& value) {
  
  kernel_name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:tensorflow.MemoryLogTensorOutput.kernel_name)
}
#if LANG_CXX11
inline void MemoryLogTensorOutput::set_kernel_name(::std::string&& value) {
  
  kernel_name_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:tensorflow.MemoryLogTensorOutput.kernel_name)
}
#endif
inline void MemoryLogTensorOutput::set_kernel_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  kernel_name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:tensorflow.MemoryLogTensorOutput.kernel_name)
}
inline void MemoryLogTensorOutput::set_kernel_name(const char* value,
    size_t size) {
  
  kernel_name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:tensorflow.MemoryLogTensorOutput.kernel_name)
}
inline ::std::string* MemoryLogTensorOutput::mutable_kernel_name() {
  
  // @@protoc_insertion_point(field_mutable:tensorflow.MemoryLogTensorOutput.kernel_name)
  return kernel_name_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* MemoryLogTensorOutput::release_kernel_name() {
  // @@protoc_insertion_point(field_release:tensorflow.MemoryLogTensorOutput.kernel_name)
  
  return kernel_name_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void MemoryLogTensorOutput::set_allocated_kernel_name(::std::string* kernel_name) {
  if (kernel_name != NULL) {
    
  } else {
    
  }
  kernel_name_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), kernel_name,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:tensorflow.MemoryLogTensorOutput.kernel_name)
}
inline ::std::string* MemoryLogTensorOutput::unsafe_arena_release_kernel_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:tensorflow.MemoryLogTensorOutput.kernel_name)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return kernel_name_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void MemoryLogTensorOutput::unsafe_arena_set_allocated_kernel_name(
    ::std::string* kernel_name) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (kernel_name != NULL) {
    
  } else {
    
  }
  kernel_name_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      kernel_name, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tensorflow.MemoryLogTensorOutput.kernel_name)
}

// int32 index = 3;
inline void MemoryLogTensorOutput::clear_index() {
  index_ = 0;
}
inline ::google::protobuf::int32 MemoryLogTensorOutput::index() const {
  // @@protoc_insertion_point(field_get:tensorflow.MemoryLogTensorOutput.index)
  return index_;
}
inline void MemoryLogTensorOutput::set_index(::google::protobuf::int32 value) {
  
  index_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.MemoryLogTensorOutput.index)
}

// .tensorflow.TensorDescription tensor = 4;
inline bool MemoryLogTensorOutput::has_tensor() const {
  return this != internal_default_instance() && tensor_ != NULL;
}
inline const ::tensorflow::TensorDescription& MemoryLogTensorOutput::tensor() const {
  const ::tensorflow::TensorDescription* p = tensor_;
  // @@protoc_insertion_point(field_get:tensorflow.MemoryLogTensorOutput.tensor)
  return p != NULL ? *p : *reinterpret_cast<const ::tensorflow::TensorDescription*>(
      &::tensorflow::_TensorDescription_default_instance_);
}
inline ::tensorflow::TensorDescription* MemoryLogTensorOutput::release_tensor() {
  // @@protoc_insertion_point(field_release:tensorflow.MemoryLogTensorOutput.tensor)
  
  ::tensorflow::TensorDescription* temp = tensor_;
  if (GetArenaNoVirtual() != NULL) {
    temp = ::google::protobuf::internal::DuplicateIfNonNull(temp, NULL);
  }
  tensor_ = NULL;
  return temp;
}
inline ::tensorflow::TensorDescription* MemoryLogTensorOutput::unsafe_arena_release_tensor() {
  // @@protoc_insertion_point(field_unsafe_arena_release:tensorflow.MemoryLogTensorOutput.tensor)
  
  ::tensorflow::TensorDescription* temp = tensor_;
  tensor_ = NULL;
  return temp;
}
inline ::tensorflow::TensorDescription* MemoryLogTensorOutput::mutable_tensor() {
  
  if (tensor_ == NULL) {
    tensor_ = ::google::protobuf::Arena::CreateMessage< ::tensorflow::TensorDescription >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:tensorflow.MemoryLogTensorOutput.tensor)
  return tensor_;
}
inline void MemoryLogTensorOutput::set_allocated_tensor(::tensorflow::TensorDescription* tensor) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(tensor_);
  }
  if (tensor) {
    ::google::protobuf::Arena* submessage_arena =
      reinterpret_cast< ::google::protobuf::MessageLite*>(tensor)->GetArena();
    if (message_arena != submessage_arena) {
      tensor = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, tensor, submessage_arena);
    }
    
  } else {
    
  }
  tensor_ = tensor;
  // @@protoc_insertion_point(field_set_allocated:tensorflow.MemoryLogTensorOutput.tensor)
}

// -------------------------------------------------------------------

// MemoryLogRawAllocation

// int64 step_id = 1;
inline void MemoryLogRawAllocation::clear_step_id() {
  step_id_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 MemoryLogRawAllocation::step_id() const {
  // @@protoc_insertion_point(field_get:tensorflow.MemoryLogRawAllocation.step_id)
  return step_id_;
}
inline void MemoryLogRawAllocation::set_step_id(::google::protobuf::int64 value) {
  
  step_id_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.MemoryLogRawAllocation.step_id)
}

// string operation = 2;
inline void MemoryLogRawAllocation::clear_operation() {
  operation_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& MemoryLogRawAllocation::operation() const {
  // @@protoc_insertion_point(field_get:tensorflow.MemoryLogRawAllocation.operation)
  return operation_.Get();
}
inline void MemoryLogRawAllocation::set_operation(const ::std::string& value) {
  
  operation_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:tensorflow.MemoryLogRawAllocation.operation)
}
#if LANG_CXX11
inline void MemoryLogRawAllocation::set_operation(::std::string&& value) {
  
  operation_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:tensorflow.MemoryLogRawAllocation.operation)
}
#endif
inline void MemoryLogRawAllocation::set_operation(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  operation_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:tensorflow.MemoryLogRawAllocation.operation)
}
inline void MemoryLogRawAllocation::set_operation(const char* value,
    size_t size) {
  
  operation_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:tensorflow.MemoryLogRawAllocation.operation)
}
inline ::std::string* MemoryLogRawAllocation::mutable_operation() {
  
  // @@protoc_insertion_point(field_mutable:tensorflow.MemoryLogRawAllocation.operation)
  return operation_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* MemoryLogRawAllocation::release_operation() {
  // @@protoc_insertion_point(field_release:tensorflow.MemoryLogRawAllocation.operation)
  
  return operation_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void MemoryLogRawAllocation::set_allocated_operation(::std::string* operation) {
  if (operation != NULL) {
    
  } else {
    
  }
  operation_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), operation,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:tensorflow.MemoryLogRawAllocation.operation)
}
inline ::std::string* MemoryLogRawAllocation::unsafe_arena_release_operation() {
  // @@protoc_insertion_point(field_unsafe_arena_release:tensorflow.MemoryLogRawAllocation.operation)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return operation_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void MemoryLogRawAllocation::unsafe_arena_set_allocated_operation(
    ::std::string* operation) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (operation != NULL) {
    
  } else {
    
  }
  operation_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      operation, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tensorflow.MemoryLogRawAllocation.operation)
}

// int64 num_bytes = 3;
inline void MemoryLogRawAllocation::clear_num_bytes() {
  num_bytes_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 MemoryLogRawAllocation::num_bytes() const {
  // @@protoc_insertion_point(field_get:tensorflow.MemoryLogRawAllocation.num_bytes)
  return num_bytes_;
}
inline void MemoryLogRawAllocation::set_num_bytes(::google::protobuf::int64 value) {
  
  num_bytes_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.MemoryLogRawAllocation.num_bytes)
}

// uint64 ptr = 4;
inline void MemoryLogRawAllocation::clear_ptr() {
  ptr_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 MemoryLogRawAllocation::ptr() const {
  // @@protoc_insertion_point(field_get:tensorflow.MemoryLogRawAllocation.ptr)
  return ptr_;
}
inline void MemoryLogRawAllocation::set_ptr(::google::protobuf::uint64 value) {
  
  ptr_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.MemoryLogRawAllocation.ptr)
}

// int64 allocation_id = 5;
inline void MemoryLogRawAllocation::clear_allocation_id() {
  allocation_id_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 MemoryLogRawAllocation::allocation_id() const {
  // @@protoc_insertion_point(field_get:tensorflow.MemoryLogRawAllocation.allocation_id)
  return allocation_id_;
}
inline void MemoryLogRawAllocation::set_allocation_id(::google::protobuf::int64 value) {
  
  allocation_id_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.MemoryLogRawAllocation.allocation_id)
}

// string allocator_name = 6;
inline void MemoryLogRawAllocation::clear_allocator_name() {
  allocator_name_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& MemoryLogRawAllocation::allocator_name() const {
  // @@protoc_insertion_point(field_get:tensorflow.MemoryLogRawAllocation.allocator_name)
  return allocator_name_.Get();
}
inline void MemoryLogRawAllocation::set_allocator_name(const ::std::string& value) {
  
  allocator_name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:tensorflow.MemoryLogRawAllocation.allocator_name)
}
#if LANG_CXX11
inline void MemoryLogRawAllocation::set_allocator_name(::std::string&& value) {
  
  allocator_name_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:tensorflow.MemoryLogRawAllocation.allocator_name)
}
#endif
inline void MemoryLogRawAllocation::set_allocator_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  allocator_name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:tensorflow.MemoryLogRawAllocation.allocator_name)
}
inline void MemoryLogRawAllocation::set_allocator_name(const char* value,
    size_t size) {
  
  allocator_name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:tensorflow.MemoryLogRawAllocation.allocator_name)
}
inline ::std::string* MemoryLogRawAllocation::mutable_allocator_name() {
  
  // @@protoc_insertion_point(field_mutable:tensorflow.MemoryLogRawAllocation.allocator_name)
  return allocator_name_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* MemoryLogRawAllocation::release_allocator_name() {
  // @@protoc_insertion_point(field_release:tensorflow.MemoryLogRawAllocation.allocator_name)
  
  return allocator_name_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void MemoryLogRawAllocation::set_allocated_allocator_name(::std::string* allocator_name) {
  if (allocator_name != NULL) {
    
  } else {
    
  }
  allocator_name_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), allocator_name,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:tensorflow.MemoryLogRawAllocation.allocator_name)
}
inline ::std::string* MemoryLogRawAllocation::unsafe_arena_release_allocator_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:tensorflow.MemoryLogRawAllocation.allocator_name)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return allocator_name_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void MemoryLogRawAllocation::unsafe_arena_set_allocated_allocator_name(
    ::std::string* allocator_name) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (allocator_name != NULL) {
    
  } else {
    
  }
  allocator_name_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      allocator_name, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tensorflow.MemoryLogRawAllocation.allocator_name)
}

// -------------------------------------------------------------------

// MemoryLogRawDeallocation

// int64 step_id = 1;
inline void MemoryLogRawDeallocation::clear_step_id() {
  step_id_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 MemoryLogRawDeallocation::step_id() const {
  // @@protoc_insertion_point(field_get:tensorflow.MemoryLogRawDeallocation.step_id)
  return step_id_;
}
inline void MemoryLogRawDeallocation::set_step_id(::google::protobuf::int64 value) {
  
  step_id_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.MemoryLogRawDeallocation.step_id)
}

// string operation = 2;
inline void MemoryLogRawDeallocation::clear_operation() {
  operation_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& MemoryLogRawDeallocation::operation() const {
  // @@protoc_insertion_point(field_get:tensorflow.MemoryLogRawDeallocation.operation)
  return operation_.Get();
}
inline void MemoryLogRawDeallocation::set_operation(const ::std::string& value) {
  
  operation_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:tensorflow.MemoryLogRawDeallocation.operation)
}
#if LANG_CXX11
inline void MemoryLogRawDeallocation::set_operation(::std::string&& value) {
  
  operation_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:tensorflow.MemoryLogRawDeallocation.operation)
}
#endif
inline void MemoryLogRawDeallocation::set_operation(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  operation_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:tensorflow.MemoryLogRawDeallocation.operation)
}
inline void MemoryLogRawDeallocation::set_operation(const char* value,
    size_t size) {
  
  operation_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:tensorflow.MemoryLogRawDeallocation.operation)
}
inline ::std::string* MemoryLogRawDeallocation::mutable_operation() {
  
  // @@protoc_insertion_point(field_mutable:tensorflow.MemoryLogRawDeallocation.operation)
  return operation_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* MemoryLogRawDeallocation::release_operation() {
  // @@protoc_insertion_point(field_release:tensorflow.MemoryLogRawDeallocation.operation)
  
  return operation_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void MemoryLogRawDeallocation::set_allocated_operation(::std::string* operation) {
  if (operation != NULL) {
    
  } else {
    
  }
  operation_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), operation,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:tensorflow.MemoryLogRawDeallocation.operation)
}
inline ::std::string* MemoryLogRawDeallocation::unsafe_arena_release_operation() {
  // @@protoc_insertion_point(field_unsafe_arena_release:tensorflow.MemoryLogRawDeallocation.operation)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return operation_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void MemoryLogRawDeallocation::unsafe_arena_set_allocated_operation(
    ::std::string* operation) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (operation != NULL) {
    
  } else {
    
  }
  operation_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      operation, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tensorflow.MemoryLogRawDeallocation.operation)
}

// int64 allocation_id = 3;
inline void MemoryLogRawDeallocation::clear_allocation_id() {
  allocation_id_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 MemoryLogRawDeallocation::allocation_id() const {
  // @@protoc_insertion_point(field_get:tensorflow.MemoryLogRawDeallocation.allocation_id)
  return allocation_id_;
}
inline void MemoryLogRawDeallocation::set_allocation_id(::google::protobuf::int64 value) {
  
  allocation_id_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.MemoryLogRawDeallocation.allocation_id)
}

// string allocator_name = 4;
inline void MemoryLogRawDeallocation::clear_allocator_name() {
  allocator_name_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& MemoryLogRawDeallocation::allocator_name() const {
  // @@protoc_insertion_point(field_get:tensorflow.MemoryLogRawDeallocation.allocator_name)
  return allocator_name_.Get();
}
inline void MemoryLogRawDeallocation::set_allocator_name(const ::std::string& value) {
  
  allocator_name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:tensorflow.MemoryLogRawDeallocation.allocator_name)
}
#if LANG_CXX11
inline void MemoryLogRawDeallocation::set_allocator_name(::std::string&& value) {
  
  allocator_name_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:tensorflow.MemoryLogRawDeallocation.allocator_name)
}
#endif
inline void MemoryLogRawDeallocation::set_allocator_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  allocator_name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:tensorflow.MemoryLogRawDeallocation.allocator_name)
}
inline void MemoryLogRawDeallocation::set_allocator_name(const char* value,
    size_t size) {
  
  allocator_name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:tensorflow.MemoryLogRawDeallocation.allocator_name)
}
inline ::std::string* MemoryLogRawDeallocation::mutable_allocator_name() {
  
  // @@protoc_insertion_point(field_mutable:tensorflow.MemoryLogRawDeallocation.allocator_name)
  return allocator_name_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* MemoryLogRawDeallocation::release_allocator_name() {
  // @@protoc_insertion_point(field_release:tensorflow.MemoryLogRawDeallocation.allocator_name)
  
  return allocator_name_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void MemoryLogRawDeallocation::set_allocated_allocator_name(::std::string* allocator_name) {
  if (allocator_name != NULL) {
    
  } else {
    
  }
  allocator_name_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), allocator_name,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:tensorflow.MemoryLogRawDeallocation.allocator_name)
}
inline ::std::string* MemoryLogRawDeallocation::unsafe_arena_release_allocator_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:tensorflow.MemoryLogRawDeallocation.allocator_name)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return allocator_name_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void MemoryLogRawDeallocation::unsafe_arena_set_allocated_allocator_name(
    ::std::string* allocator_name) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (allocator_name != NULL) {
    
  } else {
    
  }
  allocator_name_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      allocator_name, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tensorflow.MemoryLogRawDeallocation.allocator_name)
}

// bool deferred = 5;
inline void MemoryLogRawDeallocation::clear_deferred() {
  deferred_ = false;
}
inline bool MemoryLogRawDeallocation::deferred() const {
  // @@protoc_insertion_point(field_get:tensorflow.MemoryLogRawDeallocation.deferred)
  return deferred_;
}
inline void MemoryLogRawDeallocation::set_deferred(bool value) {
  
  deferred_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.MemoryLogRawDeallocation.deferred)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace tensorflow

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_tensorflow_2fcore_2fframework_2flog_5fmemory_2eproto_INCLUDED
