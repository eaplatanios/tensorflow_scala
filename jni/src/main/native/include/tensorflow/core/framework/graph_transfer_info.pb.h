// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: tensorflow/core/framework/graph_transfer_info.proto

#ifndef PROTOBUF_tensorflow_2fcore_2fframework_2fgraph_5ftransfer_5finfo_2eproto__INCLUDED
#define PROTOBUF_tensorflow_2fcore_2fframework_2fgraph_5ftransfer_5finfo_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3004000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "tensorflow/core/framework/types.pb.h"
// @@protoc_insertion_point(includes)
namespace tensorflow {
class GraphTransferInfo;
class GraphTransferInfoDefaultTypeInternal;
extern GraphTransferInfoDefaultTypeInternal _GraphTransferInfo_default_instance_;
class GraphTransferInfo_ConstNodeInfo;
class GraphTransferInfo_ConstNodeInfoDefaultTypeInternal;
extern GraphTransferInfo_ConstNodeInfoDefaultTypeInternal _GraphTransferInfo_ConstNodeInfo_default_instance_;
class GraphTransferInfo_GraphInputNodeInfo;
class GraphTransferInfo_GraphInputNodeInfoDefaultTypeInternal;
extern GraphTransferInfo_GraphInputNodeInfoDefaultTypeInternal _GraphTransferInfo_GraphInputNodeInfo_default_instance_;
class GraphTransferInfo_GraphOutputNodeInfo;
class GraphTransferInfo_GraphOutputNodeInfoDefaultTypeInternal;
extern GraphTransferInfo_GraphOutputNodeInfoDefaultTypeInternal _GraphTransferInfo_GraphOutputNodeInfo_default_instance_;
class GraphTransferInfo_NodeInfo;
class GraphTransferInfo_NodeInfoDefaultTypeInternal;
extern GraphTransferInfo_NodeInfoDefaultTypeInternal _GraphTransferInfo_NodeInfo_default_instance_;
class GraphTransferInfo_NodeInput;
class GraphTransferInfo_NodeInputDefaultTypeInternal;
extern GraphTransferInfo_NodeInputDefaultTypeInternal _GraphTransferInfo_NodeInput_default_instance_;
class GraphTransferInfo_NodeInputInfo;
class GraphTransferInfo_NodeInputInfoDefaultTypeInternal;
extern GraphTransferInfo_NodeInputInfoDefaultTypeInternal _GraphTransferInfo_NodeInputInfo_default_instance_;
class GraphTransferInfo_NodeOutputInfo;
class GraphTransferInfo_NodeOutputInfoDefaultTypeInternal;
extern GraphTransferInfo_NodeOutputInfoDefaultTypeInternal _GraphTransferInfo_NodeOutputInfo_default_instance_;
}  // namespace tensorflow

namespace tensorflow {

namespace protobuf_tensorflow_2fcore_2fframework_2fgraph_5ftransfer_5finfo_2eproto {
// Internal implementation detail -- do not call these.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[];
  static const ::google::protobuf::uint32 offsets[];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static void InitDefaultsImpl();
};
void AddDescriptors();
void InitDefaults();
}  // namespace protobuf_tensorflow_2fcore_2fframework_2fgraph_5ftransfer_5finfo_2eproto

enum GraphTransferInfo_Destination {
  GraphTransferInfo_Destination_NOP = 0,
  GraphTransferInfo_Destination_HEXAGON = 1,
  GraphTransferInfo_Destination_GraphTransferInfo_Destination_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  GraphTransferInfo_Destination_GraphTransferInfo_Destination_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool GraphTransferInfo_Destination_IsValid(int value);
const GraphTransferInfo_Destination GraphTransferInfo_Destination_Destination_MIN = GraphTransferInfo_Destination_NOP;
const GraphTransferInfo_Destination GraphTransferInfo_Destination_Destination_MAX = GraphTransferInfo_Destination_HEXAGON;
const int GraphTransferInfo_Destination_Destination_ARRAYSIZE = GraphTransferInfo_Destination_Destination_MAX + 1;

const ::google::protobuf::EnumDescriptor* GraphTransferInfo_Destination_descriptor();
inline const ::std::string& GraphTransferInfo_Destination_Name(GraphTransferInfo_Destination value) {
  return ::google::protobuf::internal::NameOfEnum(
    GraphTransferInfo_Destination_descriptor(), value);
}
inline bool GraphTransferInfo_Destination_Parse(
    const ::std::string& name, GraphTransferInfo_Destination* value) {
  return ::google::protobuf::internal::ParseNamedEnum<GraphTransferInfo_Destination>(
    GraphTransferInfo_Destination_descriptor(), name, value);
}
// ===================================================================

class GraphTransferInfo_NodeInput : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:tensorflow.GraphTransferInfo.NodeInput) */ {
 public:
  GraphTransferInfo_NodeInput();
  virtual ~GraphTransferInfo_NodeInput();

  GraphTransferInfo_NodeInput(const GraphTransferInfo_NodeInput& from);

  inline GraphTransferInfo_NodeInput& operator=(const GraphTransferInfo_NodeInput& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GraphTransferInfo_NodeInput(GraphTransferInfo_NodeInput&& from) noexcept
    : GraphTransferInfo_NodeInput() {
    *this = ::std::move(from);
  }

  inline GraphTransferInfo_NodeInput& operator=(GraphTransferInfo_NodeInput&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline ::google::protobuf::Arena* GetArena() const PROTOBUF_FINAL {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const PROTOBUF_FINAL {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const GraphTransferInfo_NodeInput& default_instance();

  static inline const GraphTransferInfo_NodeInput* internal_default_instance() {
    return reinterpret_cast<const GraphTransferInfo_NodeInput*>(
               &_GraphTransferInfo_NodeInput_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void UnsafeArenaSwap(GraphTransferInfo_NodeInput* other);
  void Swap(GraphTransferInfo_NodeInput* other);
  friend void swap(GraphTransferInfo_NodeInput& a, GraphTransferInfo_NodeInput& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GraphTransferInfo_NodeInput* New() const PROTOBUF_FINAL { return New(NULL); }

  GraphTransferInfo_NodeInput* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const GraphTransferInfo_NodeInput& from);
  void MergeFrom(const GraphTransferInfo_NodeInput& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(GraphTransferInfo_NodeInput* other);
  protected:
  explicit GraphTransferInfo_NodeInput(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // int32 node_id = 1;
  void clear_node_id();
  static const int kNodeIdFieldNumber = 1;
  ::google::protobuf::int32 node_id() const;
  void set_node_id(::google::protobuf::int32 value);

  // int32 output_port = 2;
  void clear_output_port();
  static const int kOutputPortFieldNumber = 2;
  ::google::protobuf::int32 output_port() const;
  void set_output_port(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:tensorflow.GraphTransferInfo.NodeInput)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::int32 node_id_;
  ::google::protobuf::int32 output_port_;
  mutable int _cached_size_;
  friend struct protobuf_tensorflow_2fcore_2fframework_2fgraph_5ftransfer_5finfo_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GraphTransferInfo_NodeInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:tensorflow.GraphTransferInfo.NodeInfo) */ {
 public:
  GraphTransferInfo_NodeInfo();
  virtual ~GraphTransferInfo_NodeInfo();

  GraphTransferInfo_NodeInfo(const GraphTransferInfo_NodeInfo& from);

  inline GraphTransferInfo_NodeInfo& operator=(const GraphTransferInfo_NodeInfo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GraphTransferInfo_NodeInfo(GraphTransferInfo_NodeInfo&& from) noexcept
    : GraphTransferInfo_NodeInfo() {
    *this = ::std::move(from);
  }

  inline GraphTransferInfo_NodeInfo& operator=(GraphTransferInfo_NodeInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline ::google::protobuf::Arena* GetArena() const PROTOBUF_FINAL {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const PROTOBUF_FINAL {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const GraphTransferInfo_NodeInfo& default_instance();

  static inline const GraphTransferInfo_NodeInfo* internal_default_instance() {
    return reinterpret_cast<const GraphTransferInfo_NodeInfo*>(
               &_GraphTransferInfo_NodeInfo_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void UnsafeArenaSwap(GraphTransferInfo_NodeInfo* other);
  void Swap(GraphTransferInfo_NodeInfo* other);
  friend void swap(GraphTransferInfo_NodeInfo& a, GraphTransferInfo_NodeInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GraphTransferInfo_NodeInfo* New() const PROTOBUF_FINAL { return New(NULL); }

  GraphTransferInfo_NodeInfo* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const GraphTransferInfo_NodeInfo& from);
  void MergeFrom(const GraphTransferInfo_NodeInfo& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(GraphTransferInfo_NodeInfo* other);
  protected:
  explicit GraphTransferInfo_NodeInfo(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);
  ::std::string* unsafe_arena_release_name();
  void unsafe_arena_set_allocated_name(
      ::std::string* name);

  // string type_name = 3;
  void clear_type_name();
  static const int kTypeNameFieldNumber = 3;
  const ::std::string& type_name() const;
  void set_type_name(const ::std::string& value);
  #if LANG_CXX11
  void set_type_name(::std::string&& value);
  #endif
  void set_type_name(const char* value);
  void set_type_name(const char* value, size_t size);
  ::std::string* mutable_type_name();
  ::std::string* release_type_name();
  void set_allocated_type_name(::std::string* type_name);
  ::std::string* unsafe_arena_release_type_name();
  void unsafe_arena_set_allocated_type_name(
      ::std::string* type_name);

  // int32 node_id = 2;
  void clear_node_id();
  static const int kNodeIdFieldNumber = 2;
  ::google::protobuf::int32 node_id() const;
  void set_node_id(::google::protobuf::int32 value);

  // int32 soc_op_id = 4;
  void clear_soc_op_id();
  static const int kSocOpIdFieldNumber = 4;
  ::google::protobuf::int32 soc_op_id() const;
  void set_soc_op_id(::google::protobuf::int32 value);

  // int32 padding_id = 5;
  void clear_padding_id();
  static const int kPaddingIdFieldNumber = 5;
  ::google::protobuf::int32 padding_id() const;
  void set_padding_id(::google::protobuf::int32 value);

  // int32 input_count = 6;
  void clear_input_count();
  static const int kInputCountFieldNumber = 6;
  ::google::protobuf::int32 input_count() const;
  void set_input_count(::google::protobuf::int32 value);

  // int32 output_count = 7;
  void clear_output_count();
  static const int kOutputCountFieldNumber = 7;
  ::google::protobuf::int32 output_count() const;
  void set_output_count(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:tensorflow.GraphTransferInfo.NodeInfo)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr type_name_;
  ::google::protobuf::int32 node_id_;
  ::google::protobuf::int32 soc_op_id_;
  ::google::protobuf::int32 padding_id_;
  ::google::protobuf::int32 input_count_;
  ::google::protobuf::int32 output_count_;
  mutable int _cached_size_;
  friend struct protobuf_tensorflow_2fcore_2fframework_2fgraph_5ftransfer_5finfo_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GraphTransferInfo_ConstNodeInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:tensorflow.GraphTransferInfo.ConstNodeInfo) */ {
 public:
  GraphTransferInfo_ConstNodeInfo();
  virtual ~GraphTransferInfo_ConstNodeInfo();

  GraphTransferInfo_ConstNodeInfo(const GraphTransferInfo_ConstNodeInfo& from);

  inline GraphTransferInfo_ConstNodeInfo& operator=(const GraphTransferInfo_ConstNodeInfo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GraphTransferInfo_ConstNodeInfo(GraphTransferInfo_ConstNodeInfo&& from) noexcept
    : GraphTransferInfo_ConstNodeInfo() {
    *this = ::std::move(from);
  }

  inline GraphTransferInfo_ConstNodeInfo& operator=(GraphTransferInfo_ConstNodeInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline ::google::protobuf::Arena* GetArena() const PROTOBUF_FINAL {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const PROTOBUF_FINAL {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const GraphTransferInfo_ConstNodeInfo& default_instance();

  static inline const GraphTransferInfo_ConstNodeInfo* internal_default_instance() {
    return reinterpret_cast<const GraphTransferInfo_ConstNodeInfo*>(
               &_GraphTransferInfo_ConstNodeInfo_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    2;

  void UnsafeArenaSwap(GraphTransferInfo_ConstNodeInfo* other);
  void Swap(GraphTransferInfo_ConstNodeInfo* other);
  friend void swap(GraphTransferInfo_ConstNodeInfo& a, GraphTransferInfo_ConstNodeInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GraphTransferInfo_ConstNodeInfo* New() const PROTOBUF_FINAL { return New(NULL); }

  GraphTransferInfo_ConstNodeInfo* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const GraphTransferInfo_ConstNodeInfo& from);
  void MergeFrom(const GraphTransferInfo_ConstNodeInfo& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(GraphTransferInfo_ConstNodeInfo* other);
  protected:
  explicit GraphTransferInfo_ConstNodeInfo(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated int64 shape = 3;
  int shape_size() const;
  void clear_shape();
  static const int kShapeFieldNumber = 3;
  ::google::protobuf::int64 shape(int index) const;
  void set_shape(int index, ::google::protobuf::int64 value);
  void add_shape(::google::protobuf::int64 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
      shape() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
      mutable_shape();

  // string name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);
  ::std::string* unsafe_arena_release_name();
  void unsafe_arena_set_allocated_name(
      ::std::string* name);

  // bytes data = 4;
  void clear_data();
  static const int kDataFieldNumber = 4;
  const ::std::string& data() const;
  void set_data(const ::std::string& value);
  #if LANG_CXX11
  void set_data(::std::string&& value);
  #endif
  void set_data(const char* value);
  void set_data(const void* value, size_t size);
  ::std::string* mutable_data();
  ::std::string* release_data();
  void set_allocated_data(::std::string* data);
  ::std::string* unsafe_arena_release_data();
  void unsafe_arena_set_allocated_data(
      ::std::string* data);

  // int32 node_id = 2;
  void clear_node_id();
  static const int kNodeIdFieldNumber = 2;
  ::google::protobuf::int32 node_id() const;
  void set_node_id(::google::protobuf::int32 value);

  // .tensorflow.DataType dtype = 5;
  void clear_dtype();
  static const int kDtypeFieldNumber = 5;
  ::tensorflow::DataType dtype() const;
  void set_dtype(::tensorflow::DataType value);

  // @@protoc_insertion_point(class_scope:tensorflow.GraphTransferInfo.ConstNodeInfo)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int64 > shape_;
  mutable int _shape_cached_byte_size_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr data_;
  ::google::protobuf::int32 node_id_;
  int dtype_;
  mutable int _cached_size_;
  friend struct protobuf_tensorflow_2fcore_2fframework_2fgraph_5ftransfer_5finfo_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GraphTransferInfo_NodeInputInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:tensorflow.GraphTransferInfo.NodeInputInfo) */ {
 public:
  GraphTransferInfo_NodeInputInfo();
  virtual ~GraphTransferInfo_NodeInputInfo();

  GraphTransferInfo_NodeInputInfo(const GraphTransferInfo_NodeInputInfo& from);

  inline GraphTransferInfo_NodeInputInfo& operator=(const GraphTransferInfo_NodeInputInfo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GraphTransferInfo_NodeInputInfo(GraphTransferInfo_NodeInputInfo&& from) noexcept
    : GraphTransferInfo_NodeInputInfo() {
    *this = ::std::move(from);
  }

  inline GraphTransferInfo_NodeInputInfo& operator=(GraphTransferInfo_NodeInputInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline ::google::protobuf::Arena* GetArena() const PROTOBUF_FINAL {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const PROTOBUF_FINAL {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const GraphTransferInfo_NodeInputInfo& default_instance();

  static inline const GraphTransferInfo_NodeInputInfo* internal_default_instance() {
    return reinterpret_cast<const GraphTransferInfo_NodeInputInfo*>(
               &_GraphTransferInfo_NodeInputInfo_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    3;

  void UnsafeArenaSwap(GraphTransferInfo_NodeInputInfo* other);
  void Swap(GraphTransferInfo_NodeInputInfo* other);
  friend void swap(GraphTransferInfo_NodeInputInfo& a, GraphTransferInfo_NodeInputInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GraphTransferInfo_NodeInputInfo* New() const PROTOBUF_FINAL { return New(NULL); }

  GraphTransferInfo_NodeInputInfo* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const GraphTransferInfo_NodeInputInfo& from);
  void MergeFrom(const GraphTransferInfo_NodeInputInfo& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(GraphTransferInfo_NodeInputInfo* other);
  protected:
  explicit GraphTransferInfo_NodeInputInfo(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .tensorflow.GraphTransferInfo.NodeInput node_input = 2;
  int node_input_size() const;
  void clear_node_input();
  static const int kNodeInputFieldNumber = 2;
  const ::tensorflow::GraphTransferInfo_NodeInput& node_input(int index) const;
  ::tensorflow::GraphTransferInfo_NodeInput* mutable_node_input(int index);
  ::tensorflow::GraphTransferInfo_NodeInput* add_node_input();
  ::google::protobuf::RepeatedPtrField< ::tensorflow::GraphTransferInfo_NodeInput >*
      mutable_node_input();
  const ::google::protobuf::RepeatedPtrField< ::tensorflow::GraphTransferInfo_NodeInput >&
      node_input() const;

  // int32 node_id = 1;
  void clear_node_id();
  static const int kNodeIdFieldNumber = 1;
  ::google::protobuf::int32 node_id() const;
  void set_node_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:tensorflow.GraphTransferInfo.NodeInputInfo)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::RepeatedPtrField< ::tensorflow::GraphTransferInfo_NodeInput > node_input_;
  ::google::protobuf::int32 node_id_;
  mutable int _cached_size_;
  friend struct protobuf_tensorflow_2fcore_2fframework_2fgraph_5ftransfer_5finfo_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GraphTransferInfo_NodeOutputInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:tensorflow.GraphTransferInfo.NodeOutputInfo) */ {
 public:
  GraphTransferInfo_NodeOutputInfo();
  virtual ~GraphTransferInfo_NodeOutputInfo();

  GraphTransferInfo_NodeOutputInfo(const GraphTransferInfo_NodeOutputInfo& from);

  inline GraphTransferInfo_NodeOutputInfo& operator=(const GraphTransferInfo_NodeOutputInfo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GraphTransferInfo_NodeOutputInfo(GraphTransferInfo_NodeOutputInfo&& from) noexcept
    : GraphTransferInfo_NodeOutputInfo() {
    *this = ::std::move(from);
  }

  inline GraphTransferInfo_NodeOutputInfo& operator=(GraphTransferInfo_NodeOutputInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline ::google::protobuf::Arena* GetArena() const PROTOBUF_FINAL {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const PROTOBUF_FINAL {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const GraphTransferInfo_NodeOutputInfo& default_instance();

  static inline const GraphTransferInfo_NodeOutputInfo* internal_default_instance() {
    return reinterpret_cast<const GraphTransferInfo_NodeOutputInfo*>(
               &_GraphTransferInfo_NodeOutputInfo_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    4;

  void UnsafeArenaSwap(GraphTransferInfo_NodeOutputInfo* other);
  void Swap(GraphTransferInfo_NodeOutputInfo* other);
  friend void swap(GraphTransferInfo_NodeOutputInfo& a, GraphTransferInfo_NodeOutputInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GraphTransferInfo_NodeOutputInfo* New() const PROTOBUF_FINAL { return New(NULL); }

  GraphTransferInfo_NodeOutputInfo* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const GraphTransferInfo_NodeOutputInfo& from);
  void MergeFrom(const GraphTransferInfo_NodeOutputInfo& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(GraphTransferInfo_NodeOutputInfo* other);
  protected:
  explicit GraphTransferInfo_NodeOutputInfo(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated int32 max_byte_size = 2;
  int max_byte_size_size() const;
  void clear_max_byte_size();
  static const int kMaxByteSizeFieldNumber = 2;
  ::google::protobuf::int32 max_byte_size(int index) const;
  void set_max_byte_size(int index, ::google::protobuf::int32 value);
  void add_max_byte_size(::google::protobuf::int32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      max_byte_size() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_max_byte_size();

  // int32 node_id = 1;
  void clear_node_id();
  static const int kNodeIdFieldNumber = 1;
  ::google::protobuf::int32 node_id() const;
  void set_node_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:tensorflow.GraphTransferInfo.NodeOutputInfo)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > max_byte_size_;
  mutable int _max_byte_size_cached_byte_size_;
  ::google::protobuf::int32 node_id_;
  mutable int _cached_size_;
  friend struct protobuf_tensorflow_2fcore_2fframework_2fgraph_5ftransfer_5finfo_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GraphTransferInfo_GraphInputNodeInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:tensorflow.GraphTransferInfo.GraphInputNodeInfo) */ {
 public:
  GraphTransferInfo_GraphInputNodeInfo();
  virtual ~GraphTransferInfo_GraphInputNodeInfo();

  GraphTransferInfo_GraphInputNodeInfo(const GraphTransferInfo_GraphInputNodeInfo& from);

  inline GraphTransferInfo_GraphInputNodeInfo& operator=(const GraphTransferInfo_GraphInputNodeInfo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GraphTransferInfo_GraphInputNodeInfo(GraphTransferInfo_GraphInputNodeInfo&& from) noexcept
    : GraphTransferInfo_GraphInputNodeInfo() {
    *this = ::std::move(from);
  }

  inline GraphTransferInfo_GraphInputNodeInfo& operator=(GraphTransferInfo_GraphInputNodeInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline ::google::protobuf::Arena* GetArena() const PROTOBUF_FINAL {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const PROTOBUF_FINAL {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const GraphTransferInfo_GraphInputNodeInfo& default_instance();

  static inline const GraphTransferInfo_GraphInputNodeInfo* internal_default_instance() {
    return reinterpret_cast<const GraphTransferInfo_GraphInputNodeInfo*>(
               &_GraphTransferInfo_GraphInputNodeInfo_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    5;

  void UnsafeArenaSwap(GraphTransferInfo_GraphInputNodeInfo* other);
  void Swap(GraphTransferInfo_GraphInputNodeInfo* other);
  friend void swap(GraphTransferInfo_GraphInputNodeInfo& a, GraphTransferInfo_GraphInputNodeInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GraphTransferInfo_GraphInputNodeInfo* New() const PROTOBUF_FINAL { return New(NULL); }

  GraphTransferInfo_GraphInputNodeInfo* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const GraphTransferInfo_GraphInputNodeInfo& from);
  void MergeFrom(const GraphTransferInfo_GraphInputNodeInfo& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(GraphTransferInfo_GraphInputNodeInfo* other);
  protected:
  explicit GraphTransferInfo_GraphInputNodeInfo(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated int64 shape = 2;
  int shape_size() const;
  void clear_shape();
  static const int kShapeFieldNumber = 2;
  ::google::protobuf::int64 shape(int index) const;
  void set_shape(int index, ::google::protobuf::int64 value);
  void add_shape(::google::protobuf::int64 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
      shape() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
      mutable_shape();

  // string name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);
  ::std::string* unsafe_arena_release_name();
  void unsafe_arena_set_allocated_name(
      ::std::string* name);

  // .tensorflow.DataType dtype = 3;
  void clear_dtype();
  static const int kDtypeFieldNumber = 3;
  ::tensorflow::DataType dtype() const;
  void set_dtype(::tensorflow::DataType value);

  // @@protoc_insertion_point(class_scope:tensorflow.GraphTransferInfo.GraphInputNodeInfo)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int64 > shape_;
  mutable int _shape_cached_byte_size_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  int dtype_;
  mutable int _cached_size_;
  friend struct protobuf_tensorflow_2fcore_2fframework_2fgraph_5ftransfer_5finfo_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GraphTransferInfo_GraphOutputNodeInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:tensorflow.GraphTransferInfo.GraphOutputNodeInfo) */ {
 public:
  GraphTransferInfo_GraphOutputNodeInfo();
  virtual ~GraphTransferInfo_GraphOutputNodeInfo();

  GraphTransferInfo_GraphOutputNodeInfo(const GraphTransferInfo_GraphOutputNodeInfo& from);

  inline GraphTransferInfo_GraphOutputNodeInfo& operator=(const GraphTransferInfo_GraphOutputNodeInfo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GraphTransferInfo_GraphOutputNodeInfo(GraphTransferInfo_GraphOutputNodeInfo&& from) noexcept
    : GraphTransferInfo_GraphOutputNodeInfo() {
    *this = ::std::move(from);
  }

  inline GraphTransferInfo_GraphOutputNodeInfo& operator=(GraphTransferInfo_GraphOutputNodeInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline ::google::protobuf::Arena* GetArena() const PROTOBUF_FINAL {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const PROTOBUF_FINAL {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const GraphTransferInfo_GraphOutputNodeInfo& default_instance();

  static inline const GraphTransferInfo_GraphOutputNodeInfo* internal_default_instance() {
    return reinterpret_cast<const GraphTransferInfo_GraphOutputNodeInfo*>(
               &_GraphTransferInfo_GraphOutputNodeInfo_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    6;

  void UnsafeArenaSwap(GraphTransferInfo_GraphOutputNodeInfo* other);
  void Swap(GraphTransferInfo_GraphOutputNodeInfo* other);
  friend void swap(GraphTransferInfo_GraphOutputNodeInfo& a, GraphTransferInfo_GraphOutputNodeInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GraphTransferInfo_GraphOutputNodeInfo* New() const PROTOBUF_FINAL { return New(NULL); }

  GraphTransferInfo_GraphOutputNodeInfo* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const GraphTransferInfo_GraphOutputNodeInfo& from);
  void MergeFrom(const GraphTransferInfo_GraphOutputNodeInfo& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(GraphTransferInfo_GraphOutputNodeInfo* other);
  protected:
  explicit GraphTransferInfo_GraphOutputNodeInfo(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated int64 shape = 2;
  int shape_size() const;
  void clear_shape();
  static const int kShapeFieldNumber = 2;
  ::google::protobuf::int64 shape(int index) const;
  void set_shape(int index, ::google::protobuf::int64 value);
  void add_shape(::google::protobuf::int64 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
      shape() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
      mutable_shape();

  // string name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);
  ::std::string* unsafe_arena_release_name();
  void unsafe_arena_set_allocated_name(
      ::std::string* name);

  // .tensorflow.DataType dtype = 3;
  void clear_dtype();
  static const int kDtypeFieldNumber = 3;
  ::tensorflow::DataType dtype() const;
  void set_dtype(::tensorflow::DataType value);

  // @@protoc_insertion_point(class_scope:tensorflow.GraphTransferInfo.GraphOutputNodeInfo)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int64 > shape_;
  mutable int _shape_cached_byte_size_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  int dtype_;
  mutable int _cached_size_;
  friend struct protobuf_tensorflow_2fcore_2fframework_2fgraph_5ftransfer_5finfo_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GraphTransferInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:tensorflow.GraphTransferInfo) */ {
 public:
  GraphTransferInfo();
  virtual ~GraphTransferInfo();

  GraphTransferInfo(const GraphTransferInfo& from);

  inline GraphTransferInfo& operator=(const GraphTransferInfo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GraphTransferInfo(GraphTransferInfo&& from) noexcept
    : GraphTransferInfo() {
    *this = ::std::move(from);
  }

  inline GraphTransferInfo& operator=(GraphTransferInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline ::google::protobuf::Arena* GetArena() const PROTOBUF_FINAL {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const PROTOBUF_FINAL {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const GraphTransferInfo& default_instance();

  static inline const GraphTransferInfo* internal_default_instance() {
    return reinterpret_cast<const GraphTransferInfo*>(
               &_GraphTransferInfo_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    7;

  void UnsafeArenaSwap(GraphTransferInfo* other);
  void Swap(GraphTransferInfo* other);
  friend void swap(GraphTransferInfo& a, GraphTransferInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GraphTransferInfo* New() const PROTOBUF_FINAL { return New(NULL); }

  GraphTransferInfo* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const GraphTransferInfo& from);
  void MergeFrom(const GraphTransferInfo& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(GraphTransferInfo* other);
  protected:
  explicit GraphTransferInfo(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef GraphTransferInfo_NodeInput NodeInput;
  typedef GraphTransferInfo_NodeInfo NodeInfo;
  typedef GraphTransferInfo_ConstNodeInfo ConstNodeInfo;
  typedef GraphTransferInfo_NodeInputInfo NodeInputInfo;
  typedef GraphTransferInfo_NodeOutputInfo NodeOutputInfo;
  typedef GraphTransferInfo_GraphInputNodeInfo GraphInputNodeInfo;
  typedef GraphTransferInfo_GraphOutputNodeInfo GraphOutputNodeInfo;

  typedef GraphTransferInfo_Destination Destination;
  static const Destination NOP =
    GraphTransferInfo_Destination_NOP;
  static const Destination HEXAGON =
    GraphTransferInfo_Destination_HEXAGON;
  static inline bool Destination_IsValid(int value) {
    return GraphTransferInfo_Destination_IsValid(value);
  }
  static const Destination Destination_MIN =
    GraphTransferInfo_Destination_Destination_MIN;
  static const Destination Destination_MAX =
    GraphTransferInfo_Destination_Destination_MAX;
  static const int Destination_ARRAYSIZE =
    GraphTransferInfo_Destination_Destination_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Destination_descriptor() {
    return GraphTransferInfo_Destination_descriptor();
  }
  static inline const ::std::string& Destination_Name(Destination value) {
    return GraphTransferInfo_Destination_Name(value);
  }
  static inline bool Destination_Parse(const ::std::string& name,
      Destination* value) {
    return GraphTransferInfo_Destination_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // repeated .tensorflow.GraphTransferInfo.NodeInfo node_info = 1;
  int node_info_size() const;
  void clear_node_info();
  static const int kNodeInfoFieldNumber = 1;
  const ::tensorflow::GraphTransferInfo_NodeInfo& node_info(int index) const;
  ::tensorflow::GraphTransferInfo_NodeInfo* mutable_node_info(int index);
  ::tensorflow::GraphTransferInfo_NodeInfo* add_node_info();
  ::google::protobuf::RepeatedPtrField< ::tensorflow::GraphTransferInfo_NodeInfo >*
      mutable_node_info();
  const ::google::protobuf::RepeatedPtrField< ::tensorflow::GraphTransferInfo_NodeInfo >&
      node_info() const;

  // repeated .tensorflow.GraphTransferInfo.ConstNodeInfo const_node_info = 2;
  int const_node_info_size() const;
  void clear_const_node_info();
  static const int kConstNodeInfoFieldNumber = 2;
  const ::tensorflow::GraphTransferInfo_ConstNodeInfo& const_node_info(int index) const;
  ::tensorflow::GraphTransferInfo_ConstNodeInfo* mutable_const_node_info(int index);
  ::tensorflow::GraphTransferInfo_ConstNodeInfo* add_const_node_info();
  ::google::protobuf::RepeatedPtrField< ::tensorflow::GraphTransferInfo_ConstNodeInfo >*
      mutable_const_node_info();
  const ::google::protobuf::RepeatedPtrField< ::tensorflow::GraphTransferInfo_ConstNodeInfo >&
      const_node_info() const;

  // repeated .tensorflow.GraphTransferInfo.NodeInputInfo node_input_info = 3;
  int node_input_info_size() const;
  void clear_node_input_info();
  static const int kNodeInputInfoFieldNumber = 3;
  const ::tensorflow::GraphTransferInfo_NodeInputInfo& node_input_info(int index) const;
  ::tensorflow::GraphTransferInfo_NodeInputInfo* mutable_node_input_info(int index);
  ::tensorflow::GraphTransferInfo_NodeInputInfo* add_node_input_info();
  ::google::protobuf::RepeatedPtrField< ::tensorflow::GraphTransferInfo_NodeInputInfo >*
      mutable_node_input_info();
  const ::google::protobuf::RepeatedPtrField< ::tensorflow::GraphTransferInfo_NodeInputInfo >&
      node_input_info() const;

  // repeated .tensorflow.GraphTransferInfo.NodeOutputInfo node_output_info = 4;
  int node_output_info_size() const;
  void clear_node_output_info();
  static const int kNodeOutputInfoFieldNumber = 4;
  const ::tensorflow::GraphTransferInfo_NodeOutputInfo& node_output_info(int index) const;
  ::tensorflow::GraphTransferInfo_NodeOutputInfo* mutable_node_output_info(int index);
  ::tensorflow::GraphTransferInfo_NodeOutputInfo* add_node_output_info();
  ::google::protobuf::RepeatedPtrField< ::tensorflow::GraphTransferInfo_NodeOutputInfo >*
      mutable_node_output_info();
  const ::google::protobuf::RepeatedPtrField< ::tensorflow::GraphTransferInfo_NodeOutputInfo >&
      node_output_info() const;

  // repeated .tensorflow.GraphTransferInfo.GraphInputNodeInfo graph_input_node_info = 5;
  int graph_input_node_info_size() const;
  void clear_graph_input_node_info();
  static const int kGraphInputNodeInfoFieldNumber = 5;
  const ::tensorflow::GraphTransferInfo_GraphInputNodeInfo& graph_input_node_info(int index) const;
  ::tensorflow::GraphTransferInfo_GraphInputNodeInfo* mutable_graph_input_node_info(int index);
  ::tensorflow::GraphTransferInfo_GraphInputNodeInfo* add_graph_input_node_info();
  ::google::protobuf::RepeatedPtrField< ::tensorflow::GraphTransferInfo_GraphInputNodeInfo >*
      mutable_graph_input_node_info();
  const ::google::protobuf::RepeatedPtrField< ::tensorflow::GraphTransferInfo_GraphInputNodeInfo >&
      graph_input_node_info() const;

  // repeated .tensorflow.GraphTransferInfo.GraphOutputNodeInfo graph_output_node_info = 6;
  int graph_output_node_info_size() const;
  void clear_graph_output_node_info();
  static const int kGraphOutputNodeInfoFieldNumber = 6;
  const ::tensorflow::GraphTransferInfo_GraphOutputNodeInfo& graph_output_node_info(int index) const;
  ::tensorflow::GraphTransferInfo_GraphOutputNodeInfo* mutable_graph_output_node_info(int index);
  ::tensorflow::GraphTransferInfo_GraphOutputNodeInfo* add_graph_output_node_info();
  ::google::protobuf::RepeatedPtrField< ::tensorflow::GraphTransferInfo_GraphOutputNodeInfo >*
      mutable_graph_output_node_info();
  const ::google::protobuf::RepeatedPtrField< ::tensorflow::GraphTransferInfo_GraphOutputNodeInfo >&
      graph_output_node_info() const;

  // .tensorflow.GraphTransferInfo.Destination destination = 7;
  void clear_destination();
  static const int kDestinationFieldNumber = 7;
  ::tensorflow::GraphTransferInfo_Destination destination() const;
  void set_destination(::tensorflow::GraphTransferInfo_Destination value);

  // @@protoc_insertion_point(class_scope:tensorflow.GraphTransferInfo)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::RepeatedPtrField< ::tensorflow::GraphTransferInfo_NodeInfo > node_info_;
  ::google::protobuf::RepeatedPtrField< ::tensorflow::GraphTransferInfo_ConstNodeInfo > const_node_info_;
  ::google::protobuf::RepeatedPtrField< ::tensorflow::GraphTransferInfo_NodeInputInfo > node_input_info_;
  ::google::protobuf::RepeatedPtrField< ::tensorflow::GraphTransferInfo_NodeOutputInfo > node_output_info_;
  ::google::protobuf::RepeatedPtrField< ::tensorflow::GraphTransferInfo_GraphInputNodeInfo > graph_input_node_info_;
  ::google::protobuf::RepeatedPtrField< ::tensorflow::GraphTransferInfo_GraphOutputNodeInfo > graph_output_node_info_;
  int destination_;
  mutable int _cached_size_;
  friend struct protobuf_tensorflow_2fcore_2fframework_2fgraph_5ftransfer_5finfo_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// GraphTransferInfo_NodeInput

// int32 node_id = 1;
inline void GraphTransferInfo_NodeInput::clear_node_id() {
  node_id_ = 0;
}
inline ::google::protobuf::int32 GraphTransferInfo_NodeInput::node_id() const {
  // @@protoc_insertion_point(field_get:tensorflow.GraphTransferInfo.NodeInput.node_id)
  return node_id_;
}
inline void GraphTransferInfo_NodeInput::set_node_id(::google::protobuf::int32 value) {
  
  node_id_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.GraphTransferInfo.NodeInput.node_id)
}

// int32 output_port = 2;
inline void GraphTransferInfo_NodeInput::clear_output_port() {
  output_port_ = 0;
}
inline ::google::protobuf::int32 GraphTransferInfo_NodeInput::output_port() const {
  // @@protoc_insertion_point(field_get:tensorflow.GraphTransferInfo.NodeInput.output_port)
  return output_port_;
}
inline void GraphTransferInfo_NodeInput::set_output_port(::google::protobuf::int32 value) {
  
  output_port_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.GraphTransferInfo.NodeInput.output_port)
}

// -------------------------------------------------------------------

// GraphTransferInfo_NodeInfo

// string name = 1;
inline void GraphTransferInfo_NodeInfo::clear_name() {
  name_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& GraphTransferInfo_NodeInfo::name() const {
  // @@protoc_insertion_point(field_get:tensorflow.GraphTransferInfo.NodeInfo.name)
  return name_.Get();
}
inline void GraphTransferInfo_NodeInfo::set_name(const ::std::string& value) {
  
  name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:tensorflow.GraphTransferInfo.NodeInfo.name)
}
#if LANG_CXX11
inline void GraphTransferInfo_NodeInfo::set_name(::std::string&& value) {
  
  name_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:tensorflow.GraphTransferInfo.NodeInfo.name)
}
#endif
inline void GraphTransferInfo_NodeInfo::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:tensorflow.GraphTransferInfo.NodeInfo.name)
}
inline void GraphTransferInfo_NodeInfo::set_name(const char* value,
    size_t size) {
  
  name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:tensorflow.GraphTransferInfo.NodeInfo.name)
}
inline ::std::string* GraphTransferInfo_NodeInfo::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:tensorflow.GraphTransferInfo.NodeInfo.name)
  return name_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* GraphTransferInfo_NodeInfo::release_name() {
  // @@protoc_insertion_point(field_release:tensorflow.GraphTransferInfo.NodeInfo.name)
  
  return name_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* GraphTransferInfo_NodeInfo::unsafe_arena_release_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:tensorflow.GraphTransferInfo.NodeInfo.name)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return name_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void GraphTransferInfo_NodeInfo::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:tensorflow.GraphTransferInfo.NodeInfo.name)
}
inline void GraphTransferInfo_NodeInfo::unsafe_arena_set_allocated_name(
    ::std::string* name) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (name != NULL) {
    
  } else {
    
  }
  name_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      name, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tensorflow.GraphTransferInfo.NodeInfo.name)
}

// int32 node_id = 2;
inline void GraphTransferInfo_NodeInfo::clear_node_id() {
  node_id_ = 0;
}
inline ::google::protobuf::int32 GraphTransferInfo_NodeInfo::node_id() const {
  // @@protoc_insertion_point(field_get:tensorflow.GraphTransferInfo.NodeInfo.node_id)
  return node_id_;
}
inline void GraphTransferInfo_NodeInfo::set_node_id(::google::protobuf::int32 value) {
  
  node_id_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.GraphTransferInfo.NodeInfo.node_id)
}

// string type_name = 3;
inline void GraphTransferInfo_NodeInfo::clear_type_name() {
  type_name_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& GraphTransferInfo_NodeInfo::type_name() const {
  // @@protoc_insertion_point(field_get:tensorflow.GraphTransferInfo.NodeInfo.type_name)
  return type_name_.Get();
}
inline void GraphTransferInfo_NodeInfo::set_type_name(const ::std::string& value) {
  
  type_name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:tensorflow.GraphTransferInfo.NodeInfo.type_name)
}
#if LANG_CXX11
inline void GraphTransferInfo_NodeInfo::set_type_name(::std::string&& value) {
  
  type_name_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:tensorflow.GraphTransferInfo.NodeInfo.type_name)
}
#endif
inline void GraphTransferInfo_NodeInfo::set_type_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  type_name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:tensorflow.GraphTransferInfo.NodeInfo.type_name)
}
inline void GraphTransferInfo_NodeInfo::set_type_name(const char* value,
    size_t size) {
  
  type_name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:tensorflow.GraphTransferInfo.NodeInfo.type_name)
}
inline ::std::string* GraphTransferInfo_NodeInfo::mutable_type_name() {
  
  // @@protoc_insertion_point(field_mutable:tensorflow.GraphTransferInfo.NodeInfo.type_name)
  return type_name_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* GraphTransferInfo_NodeInfo::release_type_name() {
  // @@protoc_insertion_point(field_release:tensorflow.GraphTransferInfo.NodeInfo.type_name)
  
  return type_name_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* GraphTransferInfo_NodeInfo::unsafe_arena_release_type_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:tensorflow.GraphTransferInfo.NodeInfo.type_name)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return type_name_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void GraphTransferInfo_NodeInfo::set_allocated_type_name(::std::string* type_name) {
  if (type_name != NULL) {
    
  } else {
    
  }
  type_name_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), type_name,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:tensorflow.GraphTransferInfo.NodeInfo.type_name)
}
inline void GraphTransferInfo_NodeInfo::unsafe_arena_set_allocated_type_name(
    ::std::string* type_name) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (type_name != NULL) {
    
  } else {
    
  }
  type_name_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      type_name, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tensorflow.GraphTransferInfo.NodeInfo.type_name)
}

// int32 soc_op_id = 4;
inline void GraphTransferInfo_NodeInfo::clear_soc_op_id() {
  soc_op_id_ = 0;
}
inline ::google::protobuf::int32 GraphTransferInfo_NodeInfo::soc_op_id() const {
  // @@protoc_insertion_point(field_get:tensorflow.GraphTransferInfo.NodeInfo.soc_op_id)
  return soc_op_id_;
}
inline void GraphTransferInfo_NodeInfo::set_soc_op_id(::google::protobuf::int32 value) {
  
  soc_op_id_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.GraphTransferInfo.NodeInfo.soc_op_id)
}

// int32 padding_id = 5;
inline void GraphTransferInfo_NodeInfo::clear_padding_id() {
  padding_id_ = 0;
}
inline ::google::protobuf::int32 GraphTransferInfo_NodeInfo::padding_id() const {
  // @@protoc_insertion_point(field_get:tensorflow.GraphTransferInfo.NodeInfo.padding_id)
  return padding_id_;
}
inline void GraphTransferInfo_NodeInfo::set_padding_id(::google::protobuf::int32 value) {
  
  padding_id_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.GraphTransferInfo.NodeInfo.padding_id)
}

// int32 input_count = 6;
inline void GraphTransferInfo_NodeInfo::clear_input_count() {
  input_count_ = 0;
}
inline ::google::protobuf::int32 GraphTransferInfo_NodeInfo::input_count() const {
  // @@protoc_insertion_point(field_get:tensorflow.GraphTransferInfo.NodeInfo.input_count)
  return input_count_;
}
inline void GraphTransferInfo_NodeInfo::set_input_count(::google::protobuf::int32 value) {
  
  input_count_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.GraphTransferInfo.NodeInfo.input_count)
}

// int32 output_count = 7;
inline void GraphTransferInfo_NodeInfo::clear_output_count() {
  output_count_ = 0;
}
inline ::google::protobuf::int32 GraphTransferInfo_NodeInfo::output_count() const {
  // @@protoc_insertion_point(field_get:tensorflow.GraphTransferInfo.NodeInfo.output_count)
  return output_count_;
}
inline void GraphTransferInfo_NodeInfo::set_output_count(::google::protobuf::int32 value) {
  
  output_count_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.GraphTransferInfo.NodeInfo.output_count)
}

// -------------------------------------------------------------------

// GraphTransferInfo_ConstNodeInfo

// string name = 1;
inline void GraphTransferInfo_ConstNodeInfo::clear_name() {
  name_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& GraphTransferInfo_ConstNodeInfo::name() const {
  // @@protoc_insertion_point(field_get:tensorflow.GraphTransferInfo.ConstNodeInfo.name)
  return name_.Get();
}
inline void GraphTransferInfo_ConstNodeInfo::set_name(const ::std::string& value) {
  
  name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:tensorflow.GraphTransferInfo.ConstNodeInfo.name)
}
#if LANG_CXX11
inline void GraphTransferInfo_ConstNodeInfo::set_name(::std::string&& value) {
  
  name_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:tensorflow.GraphTransferInfo.ConstNodeInfo.name)
}
#endif
inline void GraphTransferInfo_ConstNodeInfo::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:tensorflow.GraphTransferInfo.ConstNodeInfo.name)
}
inline void GraphTransferInfo_ConstNodeInfo::set_name(const char* value,
    size_t size) {
  
  name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:tensorflow.GraphTransferInfo.ConstNodeInfo.name)
}
inline ::std::string* GraphTransferInfo_ConstNodeInfo::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:tensorflow.GraphTransferInfo.ConstNodeInfo.name)
  return name_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* GraphTransferInfo_ConstNodeInfo::release_name() {
  // @@protoc_insertion_point(field_release:tensorflow.GraphTransferInfo.ConstNodeInfo.name)
  
  return name_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* GraphTransferInfo_ConstNodeInfo::unsafe_arena_release_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:tensorflow.GraphTransferInfo.ConstNodeInfo.name)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return name_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void GraphTransferInfo_ConstNodeInfo::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:tensorflow.GraphTransferInfo.ConstNodeInfo.name)
}
inline void GraphTransferInfo_ConstNodeInfo::unsafe_arena_set_allocated_name(
    ::std::string* name) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (name != NULL) {
    
  } else {
    
  }
  name_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      name, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tensorflow.GraphTransferInfo.ConstNodeInfo.name)
}

// int32 node_id = 2;
inline void GraphTransferInfo_ConstNodeInfo::clear_node_id() {
  node_id_ = 0;
}
inline ::google::protobuf::int32 GraphTransferInfo_ConstNodeInfo::node_id() const {
  // @@protoc_insertion_point(field_get:tensorflow.GraphTransferInfo.ConstNodeInfo.node_id)
  return node_id_;
}
inline void GraphTransferInfo_ConstNodeInfo::set_node_id(::google::protobuf::int32 value) {
  
  node_id_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.GraphTransferInfo.ConstNodeInfo.node_id)
}

// repeated int64 shape = 3;
inline int GraphTransferInfo_ConstNodeInfo::shape_size() const {
  return shape_.size();
}
inline void GraphTransferInfo_ConstNodeInfo::clear_shape() {
  shape_.Clear();
}
inline ::google::protobuf::int64 GraphTransferInfo_ConstNodeInfo::shape(int index) const {
  // @@protoc_insertion_point(field_get:tensorflow.GraphTransferInfo.ConstNodeInfo.shape)
  return shape_.Get(index);
}
inline void GraphTransferInfo_ConstNodeInfo::set_shape(int index, ::google::protobuf::int64 value) {
  shape_.Set(index, value);
  // @@protoc_insertion_point(field_set:tensorflow.GraphTransferInfo.ConstNodeInfo.shape)
}
inline void GraphTransferInfo_ConstNodeInfo::add_shape(::google::protobuf::int64 value) {
  shape_.Add(value);
  // @@protoc_insertion_point(field_add:tensorflow.GraphTransferInfo.ConstNodeInfo.shape)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
GraphTransferInfo_ConstNodeInfo::shape() const {
  // @@protoc_insertion_point(field_list:tensorflow.GraphTransferInfo.ConstNodeInfo.shape)
  return shape_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
GraphTransferInfo_ConstNodeInfo::mutable_shape() {
  // @@protoc_insertion_point(field_mutable_list:tensorflow.GraphTransferInfo.ConstNodeInfo.shape)
  return &shape_;
}

// bytes data = 4;
inline void GraphTransferInfo_ConstNodeInfo::clear_data() {
  data_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& GraphTransferInfo_ConstNodeInfo::data() const {
  // @@protoc_insertion_point(field_get:tensorflow.GraphTransferInfo.ConstNodeInfo.data)
  return data_.Get();
}
inline void GraphTransferInfo_ConstNodeInfo::set_data(const ::std::string& value) {
  
  data_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:tensorflow.GraphTransferInfo.ConstNodeInfo.data)
}
#if LANG_CXX11
inline void GraphTransferInfo_ConstNodeInfo::set_data(::std::string&& value) {
  
  data_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:tensorflow.GraphTransferInfo.ConstNodeInfo.data)
}
#endif
inline void GraphTransferInfo_ConstNodeInfo::set_data(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  data_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:tensorflow.GraphTransferInfo.ConstNodeInfo.data)
}
inline void GraphTransferInfo_ConstNodeInfo::set_data(const void* value,
    size_t size) {
  
  data_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:tensorflow.GraphTransferInfo.ConstNodeInfo.data)
}
inline ::std::string* GraphTransferInfo_ConstNodeInfo::mutable_data() {
  
  // @@protoc_insertion_point(field_mutable:tensorflow.GraphTransferInfo.ConstNodeInfo.data)
  return data_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* GraphTransferInfo_ConstNodeInfo::release_data() {
  // @@protoc_insertion_point(field_release:tensorflow.GraphTransferInfo.ConstNodeInfo.data)
  
  return data_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* GraphTransferInfo_ConstNodeInfo::unsafe_arena_release_data() {
  // @@protoc_insertion_point(field_unsafe_arena_release:tensorflow.GraphTransferInfo.ConstNodeInfo.data)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return data_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void GraphTransferInfo_ConstNodeInfo::set_allocated_data(::std::string* data) {
  if (data != NULL) {
    
  } else {
    
  }
  data_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), data,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:tensorflow.GraphTransferInfo.ConstNodeInfo.data)
}
inline void GraphTransferInfo_ConstNodeInfo::unsafe_arena_set_allocated_data(
    ::std::string* data) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (data != NULL) {
    
  } else {
    
  }
  data_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      data, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tensorflow.GraphTransferInfo.ConstNodeInfo.data)
}

// .tensorflow.DataType dtype = 5;
inline void GraphTransferInfo_ConstNodeInfo::clear_dtype() {
  dtype_ = 0;
}
inline ::tensorflow::DataType GraphTransferInfo_ConstNodeInfo::dtype() const {
  // @@protoc_insertion_point(field_get:tensorflow.GraphTransferInfo.ConstNodeInfo.dtype)
  return static_cast< ::tensorflow::DataType >(dtype_);
}
inline void GraphTransferInfo_ConstNodeInfo::set_dtype(::tensorflow::DataType value) {
  
  dtype_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.GraphTransferInfo.ConstNodeInfo.dtype)
}

// -------------------------------------------------------------------

// GraphTransferInfo_NodeInputInfo

// int32 node_id = 1;
inline void GraphTransferInfo_NodeInputInfo::clear_node_id() {
  node_id_ = 0;
}
inline ::google::protobuf::int32 GraphTransferInfo_NodeInputInfo::node_id() const {
  // @@protoc_insertion_point(field_get:tensorflow.GraphTransferInfo.NodeInputInfo.node_id)
  return node_id_;
}
inline void GraphTransferInfo_NodeInputInfo::set_node_id(::google::protobuf::int32 value) {
  
  node_id_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.GraphTransferInfo.NodeInputInfo.node_id)
}

// repeated .tensorflow.GraphTransferInfo.NodeInput node_input = 2;
inline int GraphTransferInfo_NodeInputInfo::node_input_size() const {
  return node_input_.size();
}
inline void GraphTransferInfo_NodeInputInfo::clear_node_input() {
  node_input_.Clear();
}
inline const ::tensorflow::GraphTransferInfo_NodeInput& GraphTransferInfo_NodeInputInfo::node_input(int index) const {
  // @@protoc_insertion_point(field_get:tensorflow.GraphTransferInfo.NodeInputInfo.node_input)
  return node_input_.Get(index);
}
inline ::tensorflow::GraphTransferInfo_NodeInput* GraphTransferInfo_NodeInputInfo::mutable_node_input(int index) {
  // @@protoc_insertion_point(field_mutable:tensorflow.GraphTransferInfo.NodeInputInfo.node_input)
  return node_input_.Mutable(index);
}
inline ::tensorflow::GraphTransferInfo_NodeInput* GraphTransferInfo_NodeInputInfo::add_node_input() {
  // @@protoc_insertion_point(field_add:tensorflow.GraphTransferInfo.NodeInputInfo.node_input)
  return node_input_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::tensorflow::GraphTransferInfo_NodeInput >*
GraphTransferInfo_NodeInputInfo::mutable_node_input() {
  // @@protoc_insertion_point(field_mutable_list:tensorflow.GraphTransferInfo.NodeInputInfo.node_input)
  return &node_input_;
}
inline const ::google::protobuf::RepeatedPtrField< ::tensorflow::GraphTransferInfo_NodeInput >&
GraphTransferInfo_NodeInputInfo::node_input() const {
  // @@protoc_insertion_point(field_list:tensorflow.GraphTransferInfo.NodeInputInfo.node_input)
  return node_input_;
}

// -------------------------------------------------------------------

// GraphTransferInfo_NodeOutputInfo

// int32 node_id = 1;
inline void GraphTransferInfo_NodeOutputInfo::clear_node_id() {
  node_id_ = 0;
}
inline ::google::protobuf::int32 GraphTransferInfo_NodeOutputInfo::node_id() const {
  // @@protoc_insertion_point(field_get:tensorflow.GraphTransferInfo.NodeOutputInfo.node_id)
  return node_id_;
}
inline void GraphTransferInfo_NodeOutputInfo::set_node_id(::google::protobuf::int32 value) {
  
  node_id_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.GraphTransferInfo.NodeOutputInfo.node_id)
}

// repeated int32 max_byte_size = 2;
inline int GraphTransferInfo_NodeOutputInfo::max_byte_size_size() const {
  return max_byte_size_.size();
}
inline void GraphTransferInfo_NodeOutputInfo::clear_max_byte_size() {
  max_byte_size_.Clear();
}
inline ::google::protobuf::int32 GraphTransferInfo_NodeOutputInfo::max_byte_size(int index) const {
  // @@protoc_insertion_point(field_get:tensorflow.GraphTransferInfo.NodeOutputInfo.max_byte_size)
  return max_byte_size_.Get(index);
}
inline void GraphTransferInfo_NodeOutputInfo::set_max_byte_size(int index, ::google::protobuf::int32 value) {
  max_byte_size_.Set(index, value);
  // @@protoc_insertion_point(field_set:tensorflow.GraphTransferInfo.NodeOutputInfo.max_byte_size)
}
inline void GraphTransferInfo_NodeOutputInfo::add_max_byte_size(::google::protobuf::int32 value) {
  max_byte_size_.Add(value);
  // @@protoc_insertion_point(field_add:tensorflow.GraphTransferInfo.NodeOutputInfo.max_byte_size)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
GraphTransferInfo_NodeOutputInfo::max_byte_size() const {
  // @@protoc_insertion_point(field_list:tensorflow.GraphTransferInfo.NodeOutputInfo.max_byte_size)
  return max_byte_size_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
GraphTransferInfo_NodeOutputInfo::mutable_max_byte_size() {
  // @@protoc_insertion_point(field_mutable_list:tensorflow.GraphTransferInfo.NodeOutputInfo.max_byte_size)
  return &max_byte_size_;
}

// -------------------------------------------------------------------

// GraphTransferInfo_GraphInputNodeInfo

// string name = 1;
inline void GraphTransferInfo_GraphInputNodeInfo::clear_name() {
  name_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& GraphTransferInfo_GraphInputNodeInfo::name() const {
  // @@protoc_insertion_point(field_get:tensorflow.GraphTransferInfo.GraphInputNodeInfo.name)
  return name_.Get();
}
inline void GraphTransferInfo_GraphInputNodeInfo::set_name(const ::std::string& value) {
  
  name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:tensorflow.GraphTransferInfo.GraphInputNodeInfo.name)
}
#if LANG_CXX11
inline void GraphTransferInfo_GraphInputNodeInfo::set_name(::std::string&& value) {
  
  name_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:tensorflow.GraphTransferInfo.GraphInputNodeInfo.name)
}
#endif
inline void GraphTransferInfo_GraphInputNodeInfo::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:tensorflow.GraphTransferInfo.GraphInputNodeInfo.name)
}
inline void GraphTransferInfo_GraphInputNodeInfo::set_name(const char* value,
    size_t size) {
  
  name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:tensorflow.GraphTransferInfo.GraphInputNodeInfo.name)
}
inline ::std::string* GraphTransferInfo_GraphInputNodeInfo::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:tensorflow.GraphTransferInfo.GraphInputNodeInfo.name)
  return name_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* GraphTransferInfo_GraphInputNodeInfo::release_name() {
  // @@protoc_insertion_point(field_release:tensorflow.GraphTransferInfo.GraphInputNodeInfo.name)
  
  return name_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* GraphTransferInfo_GraphInputNodeInfo::unsafe_arena_release_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:tensorflow.GraphTransferInfo.GraphInputNodeInfo.name)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return name_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void GraphTransferInfo_GraphInputNodeInfo::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:tensorflow.GraphTransferInfo.GraphInputNodeInfo.name)
}
inline void GraphTransferInfo_GraphInputNodeInfo::unsafe_arena_set_allocated_name(
    ::std::string* name) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (name != NULL) {
    
  } else {
    
  }
  name_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      name, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tensorflow.GraphTransferInfo.GraphInputNodeInfo.name)
}

// repeated int64 shape = 2;
inline int GraphTransferInfo_GraphInputNodeInfo::shape_size() const {
  return shape_.size();
}
inline void GraphTransferInfo_GraphInputNodeInfo::clear_shape() {
  shape_.Clear();
}
inline ::google::protobuf::int64 GraphTransferInfo_GraphInputNodeInfo::shape(int index) const {
  // @@protoc_insertion_point(field_get:tensorflow.GraphTransferInfo.GraphInputNodeInfo.shape)
  return shape_.Get(index);
}
inline void GraphTransferInfo_GraphInputNodeInfo::set_shape(int index, ::google::protobuf::int64 value) {
  shape_.Set(index, value);
  // @@protoc_insertion_point(field_set:tensorflow.GraphTransferInfo.GraphInputNodeInfo.shape)
}
inline void GraphTransferInfo_GraphInputNodeInfo::add_shape(::google::protobuf::int64 value) {
  shape_.Add(value);
  // @@protoc_insertion_point(field_add:tensorflow.GraphTransferInfo.GraphInputNodeInfo.shape)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
GraphTransferInfo_GraphInputNodeInfo::shape() const {
  // @@protoc_insertion_point(field_list:tensorflow.GraphTransferInfo.GraphInputNodeInfo.shape)
  return shape_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
GraphTransferInfo_GraphInputNodeInfo::mutable_shape() {
  // @@protoc_insertion_point(field_mutable_list:tensorflow.GraphTransferInfo.GraphInputNodeInfo.shape)
  return &shape_;
}

// .tensorflow.DataType dtype = 3;
inline void GraphTransferInfo_GraphInputNodeInfo::clear_dtype() {
  dtype_ = 0;
}
inline ::tensorflow::DataType GraphTransferInfo_GraphInputNodeInfo::dtype() const {
  // @@protoc_insertion_point(field_get:tensorflow.GraphTransferInfo.GraphInputNodeInfo.dtype)
  return static_cast< ::tensorflow::DataType >(dtype_);
}
inline void GraphTransferInfo_GraphInputNodeInfo::set_dtype(::tensorflow::DataType value) {
  
  dtype_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.GraphTransferInfo.GraphInputNodeInfo.dtype)
}

// -------------------------------------------------------------------

// GraphTransferInfo_GraphOutputNodeInfo

// string name = 1;
inline void GraphTransferInfo_GraphOutputNodeInfo::clear_name() {
  name_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& GraphTransferInfo_GraphOutputNodeInfo::name() const {
  // @@protoc_insertion_point(field_get:tensorflow.GraphTransferInfo.GraphOutputNodeInfo.name)
  return name_.Get();
}
inline void GraphTransferInfo_GraphOutputNodeInfo::set_name(const ::std::string& value) {
  
  name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:tensorflow.GraphTransferInfo.GraphOutputNodeInfo.name)
}
#if LANG_CXX11
inline void GraphTransferInfo_GraphOutputNodeInfo::set_name(::std::string&& value) {
  
  name_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:tensorflow.GraphTransferInfo.GraphOutputNodeInfo.name)
}
#endif
inline void GraphTransferInfo_GraphOutputNodeInfo::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:tensorflow.GraphTransferInfo.GraphOutputNodeInfo.name)
}
inline void GraphTransferInfo_GraphOutputNodeInfo::set_name(const char* value,
    size_t size) {
  
  name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:tensorflow.GraphTransferInfo.GraphOutputNodeInfo.name)
}
inline ::std::string* GraphTransferInfo_GraphOutputNodeInfo::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:tensorflow.GraphTransferInfo.GraphOutputNodeInfo.name)
  return name_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* GraphTransferInfo_GraphOutputNodeInfo::release_name() {
  // @@protoc_insertion_point(field_release:tensorflow.GraphTransferInfo.GraphOutputNodeInfo.name)
  
  return name_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* GraphTransferInfo_GraphOutputNodeInfo::unsafe_arena_release_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:tensorflow.GraphTransferInfo.GraphOutputNodeInfo.name)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return name_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void GraphTransferInfo_GraphOutputNodeInfo::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:tensorflow.GraphTransferInfo.GraphOutputNodeInfo.name)
}
inline void GraphTransferInfo_GraphOutputNodeInfo::unsafe_arena_set_allocated_name(
    ::std::string* name) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (name != NULL) {
    
  } else {
    
  }
  name_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      name, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tensorflow.GraphTransferInfo.GraphOutputNodeInfo.name)
}

// repeated int64 shape = 2;
inline int GraphTransferInfo_GraphOutputNodeInfo::shape_size() const {
  return shape_.size();
}
inline void GraphTransferInfo_GraphOutputNodeInfo::clear_shape() {
  shape_.Clear();
}
inline ::google::protobuf::int64 GraphTransferInfo_GraphOutputNodeInfo::shape(int index) const {
  // @@protoc_insertion_point(field_get:tensorflow.GraphTransferInfo.GraphOutputNodeInfo.shape)
  return shape_.Get(index);
}
inline void GraphTransferInfo_GraphOutputNodeInfo::set_shape(int index, ::google::protobuf::int64 value) {
  shape_.Set(index, value);
  // @@protoc_insertion_point(field_set:tensorflow.GraphTransferInfo.GraphOutputNodeInfo.shape)
}
inline void GraphTransferInfo_GraphOutputNodeInfo::add_shape(::google::protobuf::int64 value) {
  shape_.Add(value);
  // @@protoc_insertion_point(field_add:tensorflow.GraphTransferInfo.GraphOutputNodeInfo.shape)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
GraphTransferInfo_GraphOutputNodeInfo::shape() const {
  // @@protoc_insertion_point(field_list:tensorflow.GraphTransferInfo.GraphOutputNodeInfo.shape)
  return shape_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
GraphTransferInfo_GraphOutputNodeInfo::mutable_shape() {
  // @@protoc_insertion_point(field_mutable_list:tensorflow.GraphTransferInfo.GraphOutputNodeInfo.shape)
  return &shape_;
}

// .tensorflow.DataType dtype = 3;
inline void GraphTransferInfo_GraphOutputNodeInfo::clear_dtype() {
  dtype_ = 0;
}
inline ::tensorflow::DataType GraphTransferInfo_GraphOutputNodeInfo::dtype() const {
  // @@protoc_insertion_point(field_get:tensorflow.GraphTransferInfo.GraphOutputNodeInfo.dtype)
  return static_cast< ::tensorflow::DataType >(dtype_);
}
inline void GraphTransferInfo_GraphOutputNodeInfo::set_dtype(::tensorflow::DataType value) {
  
  dtype_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.GraphTransferInfo.GraphOutputNodeInfo.dtype)
}

// -------------------------------------------------------------------

// GraphTransferInfo

// repeated .tensorflow.GraphTransferInfo.NodeInfo node_info = 1;
inline int GraphTransferInfo::node_info_size() const {
  return node_info_.size();
}
inline void GraphTransferInfo::clear_node_info() {
  node_info_.Clear();
}
inline const ::tensorflow::GraphTransferInfo_NodeInfo& GraphTransferInfo::node_info(int index) const {
  // @@protoc_insertion_point(field_get:tensorflow.GraphTransferInfo.node_info)
  return node_info_.Get(index);
}
inline ::tensorflow::GraphTransferInfo_NodeInfo* GraphTransferInfo::mutable_node_info(int index) {
  // @@protoc_insertion_point(field_mutable:tensorflow.GraphTransferInfo.node_info)
  return node_info_.Mutable(index);
}
inline ::tensorflow::GraphTransferInfo_NodeInfo* GraphTransferInfo::add_node_info() {
  // @@protoc_insertion_point(field_add:tensorflow.GraphTransferInfo.node_info)
  return node_info_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::tensorflow::GraphTransferInfo_NodeInfo >*
GraphTransferInfo::mutable_node_info() {
  // @@protoc_insertion_point(field_mutable_list:tensorflow.GraphTransferInfo.node_info)
  return &node_info_;
}
inline const ::google::protobuf::RepeatedPtrField< ::tensorflow::GraphTransferInfo_NodeInfo >&
GraphTransferInfo::node_info() const {
  // @@protoc_insertion_point(field_list:tensorflow.GraphTransferInfo.node_info)
  return node_info_;
}

// repeated .tensorflow.GraphTransferInfo.ConstNodeInfo const_node_info = 2;
inline int GraphTransferInfo::const_node_info_size() const {
  return const_node_info_.size();
}
inline void GraphTransferInfo::clear_const_node_info() {
  const_node_info_.Clear();
}
inline const ::tensorflow::GraphTransferInfo_ConstNodeInfo& GraphTransferInfo::const_node_info(int index) const {
  // @@protoc_insertion_point(field_get:tensorflow.GraphTransferInfo.const_node_info)
  return const_node_info_.Get(index);
}
inline ::tensorflow::GraphTransferInfo_ConstNodeInfo* GraphTransferInfo::mutable_const_node_info(int index) {
  // @@protoc_insertion_point(field_mutable:tensorflow.GraphTransferInfo.const_node_info)
  return const_node_info_.Mutable(index);
}
inline ::tensorflow::GraphTransferInfo_ConstNodeInfo* GraphTransferInfo::add_const_node_info() {
  // @@protoc_insertion_point(field_add:tensorflow.GraphTransferInfo.const_node_info)
  return const_node_info_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::tensorflow::GraphTransferInfo_ConstNodeInfo >*
GraphTransferInfo::mutable_const_node_info() {
  // @@protoc_insertion_point(field_mutable_list:tensorflow.GraphTransferInfo.const_node_info)
  return &const_node_info_;
}
inline const ::google::protobuf::RepeatedPtrField< ::tensorflow::GraphTransferInfo_ConstNodeInfo >&
GraphTransferInfo::const_node_info() const {
  // @@protoc_insertion_point(field_list:tensorflow.GraphTransferInfo.const_node_info)
  return const_node_info_;
}

// repeated .tensorflow.GraphTransferInfo.NodeInputInfo node_input_info = 3;
inline int GraphTransferInfo::node_input_info_size() const {
  return node_input_info_.size();
}
inline void GraphTransferInfo::clear_node_input_info() {
  node_input_info_.Clear();
}
inline const ::tensorflow::GraphTransferInfo_NodeInputInfo& GraphTransferInfo::node_input_info(int index) const {
  // @@protoc_insertion_point(field_get:tensorflow.GraphTransferInfo.node_input_info)
  return node_input_info_.Get(index);
}
inline ::tensorflow::GraphTransferInfo_NodeInputInfo* GraphTransferInfo::mutable_node_input_info(int index) {
  // @@protoc_insertion_point(field_mutable:tensorflow.GraphTransferInfo.node_input_info)
  return node_input_info_.Mutable(index);
}
inline ::tensorflow::GraphTransferInfo_NodeInputInfo* GraphTransferInfo::add_node_input_info() {
  // @@protoc_insertion_point(field_add:tensorflow.GraphTransferInfo.node_input_info)
  return node_input_info_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::tensorflow::GraphTransferInfo_NodeInputInfo >*
GraphTransferInfo::mutable_node_input_info() {
  // @@protoc_insertion_point(field_mutable_list:tensorflow.GraphTransferInfo.node_input_info)
  return &node_input_info_;
}
inline const ::google::protobuf::RepeatedPtrField< ::tensorflow::GraphTransferInfo_NodeInputInfo >&
GraphTransferInfo::node_input_info() const {
  // @@protoc_insertion_point(field_list:tensorflow.GraphTransferInfo.node_input_info)
  return node_input_info_;
}

// repeated .tensorflow.GraphTransferInfo.NodeOutputInfo node_output_info = 4;
inline int GraphTransferInfo::node_output_info_size() const {
  return node_output_info_.size();
}
inline void GraphTransferInfo::clear_node_output_info() {
  node_output_info_.Clear();
}
inline const ::tensorflow::GraphTransferInfo_NodeOutputInfo& GraphTransferInfo::node_output_info(int index) const {
  // @@protoc_insertion_point(field_get:tensorflow.GraphTransferInfo.node_output_info)
  return node_output_info_.Get(index);
}
inline ::tensorflow::GraphTransferInfo_NodeOutputInfo* GraphTransferInfo::mutable_node_output_info(int index) {
  // @@protoc_insertion_point(field_mutable:tensorflow.GraphTransferInfo.node_output_info)
  return node_output_info_.Mutable(index);
}
inline ::tensorflow::GraphTransferInfo_NodeOutputInfo* GraphTransferInfo::add_node_output_info() {
  // @@protoc_insertion_point(field_add:tensorflow.GraphTransferInfo.node_output_info)
  return node_output_info_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::tensorflow::GraphTransferInfo_NodeOutputInfo >*
GraphTransferInfo::mutable_node_output_info() {
  // @@protoc_insertion_point(field_mutable_list:tensorflow.GraphTransferInfo.node_output_info)
  return &node_output_info_;
}
inline const ::google::protobuf::RepeatedPtrField< ::tensorflow::GraphTransferInfo_NodeOutputInfo >&
GraphTransferInfo::node_output_info() const {
  // @@protoc_insertion_point(field_list:tensorflow.GraphTransferInfo.node_output_info)
  return node_output_info_;
}

// repeated .tensorflow.GraphTransferInfo.GraphInputNodeInfo graph_input_node_info = 5;
inline int GraphTransferInfo::graph_input_node_info_size() const {
  return graph_input_node_info_.size();
}
inline void GraphTransferInfo::clear_graph_input_node_info() {
  graph_input_node_info_.Clear();
}
inline const ::tensorflow::GraphTransferInfo_GraphInputNodeInfo& GraphTransferInfo::graph_input_node_info(int index) const {
  // @@protoc_insertion_point(field_get:tensorflow.GraphTransferInfo.graph_input_node_info)
  return graph_input_node_info_.Get(index);
}
inline ::tensorflow::GraphTransferInfo_GraphInputNodeInfo* GraphTransferInfo::mutable_graph_input_node_info(int index) {
  // @@protoc_insertion_point(field_mutable:tensorflow.GraphTransferInfo.graph_input_node_info)
  return graph_input_node_info_.Mutable(index);
}
inline ::tensorflow::GraphTransferInfo_GraphInputNodeInfo* GraphTransferInfo::add_graph_input_node_info() {
  // @@protoc_insertion_point(field_add:tensorflow.GraphTransferInfo.graph_input_node_info)
  return graph_input_node_info_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::tensorflow::GraphTransferInfo_GraphInputNodeInfo >*
GraphTransferInfo::mutable_graph_input_node_info() {
  // @@protoc_insertion_point(field_mutable_list:tensorflow.GraphTransferInfo.graph_input_node_info)
  return &graph_input_node_info_;
}
inline const ::google::protobuf::RepeatedPtrField< ::tensorflow::GraphTransferInfo_GraphInputNodeInfo >&
GraphTransferInfo::graph_input_node_info() const {
  // @@protoc_insertion_point(field_list:tensorflow.GraphTransferInfo.graph_input_node_info)
  return graph_input_node_info_;
}

// repeated .tensorflow.GraphTransferInfo.GraphOutputNodeInfo graph_output_node_info = 6;
inline int GraphTransferInfo::graph_output_node_info_size() const {
  return graph_output_node_info_.size();
}
inline void GraphTransferInfo::clear_graph_output_node_info() {
  graph_output_node_info_.Clear();
}
inline const ::tensorflow::GraphTransferInfo_GraphOutputNodeInfo& GraphTransferInfo::graph_output_node_info(int index) const {
  // @@protoc_insertion_point(field_get:tensorflow.GraphTransferInfo.graph_output_node_info)
  return graph_output_node_info_.Get(index);
}
inline ::tensorflow::GraphTransferInfo_GraphOutputNodeInfo* GraphTransferInfo::mutable_graph_output_node_info(int index) {
  // @@protoc_insertion_point(field_mutable:tensorflow.GraphTransferInfo.graph_output_node_info)
  return graph_output_node_info_.Mutable(index);
}
inline ::tensorflow::GraphTransferInfo_GraphOutputNodeInfo* GraphTransferInfo::add_graph_output_node_info() {
  // @@protoc_insertion_point(field_add:tensorflow.GraphTransferInfo.graph_output_node_info)
  return graph_output_node_info_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::tensorflow::GraphTransferInfo_GraphOutputNodeInfo >*
GraphTransferInfo::mutable_graph_output_node_info() {
  // @@protoc_insertion_point(field_mutable_list:tensorflow.GraphTransferInfo.graph_output_node_info)
  return &graph_output_node_info_;
}
inline const ::google::protobuf::RepeatedPtrField< ::tensorflow::GraphTransferInfo_GraphOutputNodeInfo >&
GraphTransferInfo::graph_output_node_info() const {
  // @@protoc_insertion_point(field_list:tensorflow.GraphTransferInfo.graph_output_node_info)
  return graph_output_node_info_;
}

// .tensorflow.GraphTransferInfo.Destination destination = 7;
inline void GraphTransferInfo::clear_destination() {
  destination_ = 0;
}
inline ::tensorflow::GraphTransferInfo_Destination GraphTransferInfo::destination() const {
  // @@protoc_insertion_point(field_get:tensorflow.GraphTransferInfo.destination)
  return static_cast< ::tensorflow::GraphTransferInfo_Destination >(destination_);
}
inline void GraphTransferInfo::set_destination(::tensorflow::GraphTransferInfo_Destination value) {
  
  destination_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.GraphTransferInfo.destination)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


}  // namespace tensorflow

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::tensorflow::GraphTransferInfo_Destination> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::tensorflow::GraphTransferInfo_Destination>() {
  return ::tensorflow::GraphTransferInfo_Destination_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_tensorflow_2fcore_2fframework_2fgraph_5ftransfer_5finfo_2eproto__INCLUDED
